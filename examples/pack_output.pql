// vim: syntax=pequel ts=4 sw=4
//:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
//  Script       : pack_output.pql
//:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

options
    header                  // (default) write header record to output.
    optimize                // (default) optimize generated code.
	hash
	nulls
    doc_title("Pack Output Example Script")
    doc_email("sample@youraddress.com")
    doc_version(2.3)
	discard_header
	pack_output
	output_pack_fmt([A3/Z*]) // Perl pack/unpack formats; use brackets to repeat format for each field.

description section
	Demonstrates packing output data stream to packed or fixed record format. Use the 'pack_output' 
	and 'output_pack_fmt' options together to specify packed/fixed record output data stream. The formats 
	specified in 'output_pack_fmt' are the same as for the Perl pack/unpack functions. The format may be 
	enclosed in square brackets to indicate that this is a repeat format -- that is, the format will be 
	used for each field -- so in this example the '[A3/Z*]' will exapand to 
	'A3/Z*A3/Z*A3/Z*A3/Z*A3/Z*A3/Z*A3/Z*A3/Z*' to reflect the 7 field input record format. Please refer 
	to the Perl perlpacktut manual for format definitions. 

	The 'pack_output' option may not be used when the 'sort output' section is used.

input section
    PRODUCT_CODE,
    COST_PRICE,
    DESCRIPTION,
    SALES_CODE,
	SALES_PRICE,
	SALES_QTY,
	SALES_DATE,
	LOCATION

output section
	string LOCATION				LOCATION
	string PRODUCT_CODE			PRODUCT_CODE
	decimal SALES_QTY			SALES_QTY

