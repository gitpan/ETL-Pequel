// vim: syntax=pequel ts=4 sw=4
//:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
//  Script      : group_by_derived.pql
//:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

options
    header                  // (default) write header record to output.
    optimize                // (default) optimize generated code.
	hash					// Required because group-by field is derived.
    doc_title("Group By Derived Example Script")
    doc_email("sample@youraddress.com")
    doc_version(2.2)

description section
	This example demonstrates the use of a derived (calculated) 
	field as the grouping field. In this example it is assumed that 
	the input data contains mixed case values for LOCATION. 
	The 'hash' option is important here because grouping is based 
	on exact values -- that is, LOCATION's 'NSW' and 'Nsw' are not 
	equal, but converting both to upper case make them equal. With 
	the 'hash' option, the input data need not be sorted because 
	the output is generated in memory using Perl's associative arrays. 
	For this reason the 'hash' option should only be used when the 
	total number of groups is small, depending on the amount of 
	available memory. 

input section
    PRODUCT_CODE,
    COST_PRICE,
    DESCRIPTION,
    SALES_CODE,
    SALES_PRICE,
    SALES_QTY,
    SALES_DATE,
    LOCATION,
    SALES_TOTAL => SALES_QTY * SALES_PRICE,
    FIXED_LOC_CODE => &uc(LOCATION)

group by
    FIXED_LOC_CODE

output section
    string FIXED_LOC_CODE FIXED_LOC_CODE
    decimal SALES_TOTAL sum SALES_TOTAL
