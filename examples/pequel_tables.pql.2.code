#!/usr/bin/perl
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
# vim: syntax=perl ts=4 sw=4
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#Generated By: pequel Version 2.4-5, Build: Wednesday November 16 21:56:42 GMT 2005
#            : http://sourceforge.net/projects/pequel/
#Script Name : pequel_tables.pql
#Created On  : Wed Nov 16 14:18:17 2005
#Perl Version: /usr/bin/perl 5.6.1 on solaris
#For         : 
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#Options:
#prefix(examples) directory pathname prefix.
#dumpcode(1) Dump the generated Perl code for pequel script
#noverbose(1) do not progress counter
#script_name(examples/pequel_tables.pql) script filename
#header(1) write header record to output.
#optimize(1) optimize generated code.
#doc_title(Pequel Tables Example Script) document title.
#doc_email(sample@youraddress.com) document email entry.
#doc_version(2.3) document version for pequel script.
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
use strict;
use constant _I_PRODUCT_CODE            => int    0;
use constant _I_COST_PRICE              => int    1;
use constant _I_DESCRIPTION             => int    2;
use constant _I_SALES_CODE              => int    3;
use constant _I_SALES_PRICE             => int    4;
use constant _I_SALES_QTY               => int    5;
use constant _I_SALES_DATE              => int    6;
use constant _I_LOCATION                => int    7;
use constant _I_SALESBYLOC              => int    8;
use constant _I_SALESBYPROD             => int    9;
use constant _I_COMMENT                 => int   10;
use constant _O_PRODUCT_CODE            => int    1;
use constant _O_PRODUCT_SALES_TOTAL     => int    2;
use constant _O_LOCATION                => int    3;
use constant _O_LOCATION_SALES_TOTAL    => int    4;
use constant _O_COMMENT                 => int    5;
use constant _T_TSALESBYLOC_FLD_SALES_TOTAL    => int    0;
use constant _T_TSALESBYLOC_FLD_TOP_PRODUCT    => int    1;
use constant _T_TSALESBYPROD_FLD_SALES_TOTAL   => int    0;
use constant _I_TSALESBYLOC_LOCATION_FLD_KEY               => int   11;
use constant _I_TSALESBYLOC_LOCATION_FLD_SALES_TOTAL       => int   12;
use constant _I_TSALESBYLOC_LOCATION_FLD_TOP_PRODUCT       => int   13;
use constant _I_TSALESBYPROD_PRODUCT_CODE_FLD_KEY          => int   14;
use constant _I_TSALESBYPROD_PRODUCT_CODE_FLD_SALES_TOTAL  => int   15;
local $\="\n";
local $,="|";
use constant LAST_ICELL => int 10;
my @I_VAL;
my @O_VAL;
foreach my $f (1..5) { $O_VAL[$f] = undef; }
my $_TABLE_TSALESBYLOC = &LoadTableTSALESBYLOC; # ref to %$TSALESBYLOC hash
my $_TABLE_TSALESBYPROD = &LoadTableTSALESBYPROD; # ref to %$TSALESBYPROD hash
&PrintHeader();
while (<STDIN>)
{
    chomp;
    @I_VAL = split("[|]", $_);
    $O_VAL[_O_PRODUCT_CODE] = $I_VAL[_I_PRODUCT_CODE];
    $I_VAL[_I_SALESBYPROD] = $$_TABLE_TSALESBYPROD{qq{$I_VAL[_I_PRODUCT_CODE]}};
    $O_VAL[_O_PRODUCT_SALES_TOTAL] = $I_VAL[_I_SALESBYPROD];
    $O_VAL[_O_LOCATION] = $I_VAL[_I_LOCATION];
    $I_VAL[_I_SALESBYLOC] = ${$$_TABLE_TSALESBYLOC{qq{$I_VAL[_I_LOCATION]}}}[_T_TSALESBYLOC_FLD_SALES_TOTAL];
    $O_VAL[_O_LOCATION_SALES_TOTAL] = $I_VAL[_I_SALESBYLOC];
    $I_VAL[_I_COMMENT] = ${$$_TABLE_TSALESBYLOC{qq{$I_VAL[_I_LOCATION]}}}[_T_TSALESBYLOC_FLD_TOP_PRODUCT] eq $I_VAL[_I_PRODUCT_CODE] ? '**Best Seller' : '';
    $O_VAL[_O_COMMENT] = $I_VAL[_I_COMMENT];
    print STDOUT
        $O_VAL[_O_PRODUCT_CODE],
        $O_VAL[_O_PRODUCT_SALES_TOTAL],
        $O_VAL[_O_LOCATION],
        $O_VAL[_O_LOCATION_SALES_TOTAL],
        $O_VAL[_O_COMMENT]
    ;
}

close(STDIN);
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#++++++ Table TSALESBYLOC --> Type :ETL::Pequel::Type::Table::External::Pequel ++++++
sub LoadTableTSALESBYLOC
{
    my %_TABLE_TSALESBYLOC;
    my $pid = open(TSALESBYLOC, '-|'); # Fork
    my $count=0;
    if ($pid) # Parent
    {
        while (<TSALESBYLOC>)
        {
            chomp;
            my (@flds) = split("[|]", $_, -1);
            $_TABLE_TSALESBYLOC{$flds[0]} = [ @flds[ 1,2 ]];
        }
        
        $count=$.;
        close(TSALESBYLOC);
    }
    
    else # Child
    {
        &p_LoadTableTSALESBYLOC::LoadTableTSALESBYLOC;
        exit(0);
    }
    
    close(TSALESBYLOC);
    return \%_TABLE_TSALESBYLOC;
}


{
    package p_LoadTableTSALESBYLOC;
    sub LoadTableTSALESBYLOC
    {
#    !/usr/bin/perl
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#     vim: syntax=perl ts=4 sw=4
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#    Generated By: pequel Version 2.4-5, Build: Wednesday November 16 21:56:42 GMT 2005
#                : http://sourceforge.net/projects/pequel/
#    Script Name : sales_ttl_by_loc.pql
#    Created On  : Wed Nov 16 14:18:13 2005
#    Perl Version: /usr/bin/perl 5.6.1 on solaris
#    For         : 
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#    Options:
#        input_file(sample.data) input data filename
#        header(1) write header record to output.
#        optimize(1) optimize generated code.
#        hash(1) Generate in memory. Input data can be unsorted.
#        doc_title(Pequel Table Example Script) document title.
#        doc_email(sample@youraddress.com) document email entry.
#        doc_version(2.3) document version for pequel script.
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        use strict;
        use constant _I_PRODUCT_CODE    => int    0;
        use constant _I_COST_PRICE      => int    1;
        use constant _I_DESCRIPTION     => int    2;
        use constant _I_SALES_CODE      => int    3;
        use constant _I_SALES_PRICE     => int    4;
        use constant _I_SALES_QTY       => int    5;
        use constant _I_SALES_DATE      => int    6;
        use constant _I_LOCATION        => int    7;
        use constant _I_SALES_TOTAL     => int    8;
        use constant _I_TOP_PRODUCT     => int    9;
        use constant _O_LOCATION        => int    1;
        use constant _O_SALES_TOTAL     => int    2;
        use constant _O_TOP_PRODUCT     => int    3;
        use constant _T_TTOPPRODBYLOC_FLD_PRODUCT_CODE   => int    0;
        use constant _I_TTOPPRODBYLOC_LOCATION_FLD_KEY           => int   10;
        use constant _I_TTOPPRODBYLOC_LOCATION_FLD_PRODUCT_CODE  => int   11;
        local $\="\n";
        local $,="|";
        use constant VERBOSE => int 10000;
        use constant LAST_ICELL => int 9;
        my @I_VAL;
        my %O_VAL;
        my $key;
        my $_TABLE_TTOPPRODBYLOC = &LoadTableTTOPPRODBYLOC; # ref to %$TTOPPRODBYLOC hash
        open(DATA, q{examples/sample.data})|| die "Cannot open examples/sample.data: $!";
        &PrintHeader();
        while (<DATA>)
        {
            chomp;
            @I_VAL = split("[|]", $_);
            $key = ( $I_VAL[_I_LOCATION] );
            $O_VAL{$key}{_O_LOCATION} = $I_VAL[_I_LOCATION];
            $I_VAL[_I_SALES_TOTAL] = $I_VAL[_I_SALES_QTY] * $I_VAL[_I_SALES_PRICE];
            $O_VAL{$key}{_O_SALES_TOTAL} += $I_VAL[_I_SALES_TOTAL] unless ($I_VAL[_I_SALES_TOTAL] eq '');
            $I_VAL[_I_TOP_PRODUCT] = $$_TABLE_TTOPPRODBYLOC{qq{$I_VAL[_I_LOCATION]}};
            $O_VAL{$key}{_O_TOP_PRODUCT} = $I_VAL[_I_TOP_PRODUCT];
        }
        
        foreach $key (sort  keys %O_VAL)
        {
            print STDOUT
                $O_VAL{$key}{_O_LOCATION},
                $O_VAL{$key}{_O_SALES_TOTAL},
                $O_VAL{$key}{_O_TOP_PRODUCT}
            ;
        }
        
        close(DATA);
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#    ++++++ Table TTOPPRODBYLOC --> Type :ETL::Pequel::Type::Table::External::Pequel ++++++
        sub LoadTableTTOPPRODBYLOC
        {
            my %_TABLE_TTOPPRODBYLOC;
            my $pid = open(TTOPPRODBYLOC, '-|'); # Fork
            my $count=0;
            if ($pid) # Parent
            {
                while (<TTOPPRODBYLOC>)
                {
                    chomp;
                    my (@flds) = split("[|]", $_, -1);
                    $_TABLE_TTOPPRODBYLOC{$flds[0]} = $flds[ 1 ];
                }
                
                $count=$.;
                close(TTOPPRODBYLOC);
            }
            
            else # Child
            {
                &p_LoadTableTTOPPRODBYLOC::LoadTableTTOPPRODBYLOC;
                exit(0);
            }
            
            close(TTOPPRODBYLOC);
            return \%_TABLE_TTOPPRODBYLOC;
        }
        
        
        {
            package p_LoadTableTTOPPRODBYLOC;
            sub LoadTableTTOPPRODBYLOC
            {
#            !/usr/bin/perl
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#             vim: syntax=perl ts=4 sw=4
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#            Generated By: pequel Version 2.4-5, Build: Wednesday November 16 21:56:42 GMT 2005
#                        : http://sourceforge.net/projects/pequel/
#            Script Name : top_prod_by_loc.pql
#            Created On  : Wed Nov 16 14:18:12 2005
#            Perl Version: /usr/bin/perl 5.6.1 on solaris
#            For         : 
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#            Options:
#                input_file(sample.data) input data filename
#                header(1) write header record to output.
#                optimize(1) optimize generated code.
#                hash(1) Generate in memory. Input data can be unsorted.
#                doc_title(Pequel Table Example Script) document title.
#                doc_email(sample@youraddress.com) document email entry.
#                doc_version(2.3) document version for pequel script.
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                use strict;
                use constant _I_PRODUCT_CODE    => int    0;
                use constant _I_COST_PRICE      => int    1;
                use constant _I_DESCRIPTION     => int    2;
                use constant _I_SALES_CODE      => int    3;
                use constant _I_SALES_PRICE     => int    4;
                use constant _I_SALES_QTY       => int    5;
                use constant _I_SALES_DATE      => int    6;
                use constant _I_LOCATION        => int    7;
                use constant _I_SALES_TOTAL     => int    8;
                use constant _O_LOCATION        => int    1;
                use constant _O__MAXSALES       => int    2;
                use constant _O_PRODUCT_CODE    => int    3;
                local $\="\n";
                local $,="|";
                use constant VERBOSE => int 10000;
                use constant LAST_ICELL => int 8;
                my @I_VAL;
                my %O_VAL;
                my $key;
                open(DATA, q{examples/sample.data})|| die "Cannot open examples/sample.data: $!";
                &PrintHeader();
                while (<DATA>)
                {
                    chomp;
                    @I_VAL = split("[|]", $_);
                    $key = ( $I_VAL[_I_LOCATION] );
                    $O_VAL{$key}{_O_LOCATION} = $I_VAL[_I_LOCATION];
                    $I_VAL[_I_SALES_TOTAL] = $I_VAL[_I_SALES_QTY] * $I_VAL[_I_SALES_PRICE];
                    $O_VAL{$key}{_O__MAXSALES} = $I_VAL[_I_SALES_TOTAL]
                        if (!defined($O_VAL{$key}{_O__MAXSALES}) || $I_VAL[_I_SALES_TOTAL] > $O_VAL{$key}{_O__MAXSALES});
                    
                    if (sprintf("%.2f",$I_VAL[_I_SALES_TOTAL]) eq sprintf("%.2f",$O_VAL{$key}{_O__MAXSALES})) {
                        $O_VAL{$key}{_O_PRODUCT_CODE} = $I_VAL[_I_PRODUCT_CODE] if (!defined($O_VAL{$key}{_O_PRODUCT_CODE}));
                    }
                }
                
                foreach $key (sort  keys %O_VAL)
                {
                    print STDOUT
                        $O_VAL{$key}{_O_LOCATION},
                        $O_VAL{$key}{_O_PRODUCT_CODE}
                    ;
                }
                
                close(DATA);
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                sub PrintHeader
                {
                    local $\="\n";
                    local $,="|";
                    print STDOUT
                        'LOCATION',
                        'PRODUCT_CODE'
                        ;
                }
                
            }
            
        }
        
        sub PrintHeader
        {
            local $\="\n";
            local $,="|";
            print STDOUT
                'LOCATION',
                'SALES_TOTAL',
                'TOP_PRODUCT'
                ;
        }
        
    }
    
}

#++++++ Table TSALESBYPROD --> Type :ETL::Pequel::Type::Table::External::Pequel ++++++
sub LoadTableTSALESBYPROD
{
    my %_TABLE_TSALESBYPROD;
    my $pid = open(TSALESBYPROD, '-|'); # Fork
    my $count=0;
    if ($pid) # Parent
    {
        while (<TSALESBYPROD>)
        {
            chomp;
            my (@flds) = split("[|]", $_, -1);
            $_TABLE_TSALESBYPROD{$flds[0]} = $flds[ 1 ];
        }
        
        $count=$.;
        close(TSALESBYPROD);
    }
    
    else # Child
    {
        &p_LoadTableTSALESBYPROD::LoadTableTSALESBYPROD;
        exit(0);
    }
    
    close(TSALESBYPROD);
    return \%_TABLE_TSALESBYPROD;
}


{
    package p_LoadTableTSALESBYPROD;
    sub LoadTableTSALESBYPROD
    {
#    !/usr/bin/perl
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#     vim: syntax=perl ts=4 sw=4
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#    Generated By: pequel Version 2.4-5, Build: Wednesday November 16 21:56:42 GMT 2005
#                : http://sourceforge.net/projects/pequel/
#    Script Name : sales_ttl_by_prod.pql
#    Created On  : Wed Nov 16 14:18:16 2005
#    Perl Version: /usr/bin/perl 5.6.1 on solaris
#    For         : 
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#    Options:
#        input_file(sample.data) input data filename
#        header(1) write header record to output.
#        optimize(1) optimize generated code.
#        doc_title(Pequel Table Example Script) document title.
#        doc_email(sample@youraddress.com) document email entry.
#        doc_version(2.3) document version for pequel script.
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        use strict;
        use constant _I_PRODUCT_CODE    => int    0;
        use constant _I_COST_PRICE      => int    1;
        use constant _I_DESCRIPTION     => int    2;
        use constant _I_SALES_CODE      => int    3;
        use constant _I_SALES_PRICE     => int    4;
        use constant _I_SALES_QTY       => int    5;
        use constant _I_SALES_DATE      => int    6;
        use constant _I_LOCATION        => int    7;
        use constant _I_SALES_TOTAL     => int    8;
        use constant _O_PRODUCT_CODE    => int    1;
        use constant _O_SALES_TOTAL     => int    2;
        local $\="\n";
        local $,="|";
        use constant VERBOSE => int 10000;
        use constant LAST_ICELL => int 8;
        my @I_VAL;
        my @O_VAL;
        my $key__I_PRODUCT_CODE;
        my $previous_key__I_PRODUCT_CODE = undef;
        foreach my $f (1..2) { $O_VAL[$f] = undef; }
        open(DATA, q{examples/sample.data})|| die "Cannot open examples/sample.data: $!";
        &PrintHeader();
        while (<DATA>)
        {
            chomp;
            @I_VAL = split("[|]", $_);
            $key__I_PRODUCT_CODE = $I_VAL[_I_PRODUCT_CODE];
            if (!defined($previous_key__I_PRODUCT_CODE))
            {
                $previous_key__I_PRODUCT_CODE = $key__I_PRODUCT_CODE;
            }
            
            elsif ($previous_key__I_PRODUCT_CODE ne $key__I_PRODUCT_CODE)
            {
                print STDOUT
                    $O_VAL[_O_PRODUCT_CODE],
                    $O_VAL[_O_SALES_TOTAL]
                ;
                $previous_key__I_PRODUCT_CODE = $key__I_PRODUCT_CODE;
                @O_VAL = undef;
            }
            
            $O_VAL[_O_PRODUCT_CODE] = $I_VAL[_I_PRODUCT_CODE];
            $I_VAL[_I_SALES_TOTAL] = $I_VAL[_I_SALES_QTY] * $I_VAL[_I_SALES_PRICE];
            $O_VAL[_O_SALES_TOTAL] += $I_VAL[_I_SALES_TOTAL] unless ($I_VAL[_I_SALES_TOTAL] eq '');
        }
        
        print STDOUT
            $O_VAL[_O_PRODUCT_CODE],
            $O_VAL[_O_SALES_TOTAL]
        ;
        close(DATA);
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        sub PrintHeader
        {
            local $\="\n";
            local $,="|";
            print STDOUT
                'PRODUCT_CODE',
                'SALES_TOTAL'
                ;
        }
        
    }
    
}

sub PrintHeader
{
    local $\="\n";
    local $,="|";
    print STDOUT
        'PRODUCT_CODE',
        'PRODUCT_SALES_TOTAL',
        'LOCATION',
        'LOCATION_SALES_TOTAL',
        'COMMENT'
        ;
}

