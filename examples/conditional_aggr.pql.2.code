#!/usr/bin/perl
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
# vim: syntax=perl ts=4 sw=4
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#Generated By: pequel Version 2.3-6, Build: Wednesday October  26 23:16:49 BST 2005
#            : http://sourceforge.net/projects/pequel/
#Script Name : examples/conditional_aggr.pql
#Created On  : Wed Oct 26 13:32:51 2005
#Perl Version: /usr/bin/perl 5.6.1 on solaris
#For         : 
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#Options:
#prefix(examples) directory pathname prefix.
#dumpcode(1) Dump the generated Perl code for pequel script
#noverbose(1) do not progress counter
#script_name(examples/conditional_aggr.pql) script filename
#header(1) write header record to output.
#optimize(1) optimize generated code.
#doc_title(Conditional Aggregation Example Script) document title.
#doc_email(sample@youraddress.com) document email entry.
#doc_version(2.2) document version for pequel script.
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
use strict;
use constant _I_PRODUCT_CODE          => int    0;
use constant _I_COST_PRICE            => int    1;
use constant _I_DESCRIPTION           => int    2;
use constant _I_SALES_CODE            => int    3;
use constant _I_SALES_PRICE           => int    4;
use constant _I_SALES_QTY             => int    5;
use constant _I_SALES_DATE            => int    6;
use constant _I_LOCATION              => int    7;
use constant _O_PRODUCT_CODE          => int    1;
use constant _O_AVG_COST_PRICE        => int    2;
use constant _O_MIN_COST_PRICE        => int    3;
use constant _O_MAX_COST_PRICE        => int    4;
use constant _O_SUM_COST_PRICE        => int    5;
use constant _O_AVG_COST_PRICE_NSW    => int    6;
use constant _O_MIN_COST_PRICE_NSW    => int    7;
use constant _O_MAX_COST_PRICE_NSW    => int    8;
use constant _O_SUM_COST_PRICE_NSW    => int    9;
use constant _O_AVG_COST_PRICE_VIC    => int   10;
use constant _O_MIN_COST_PRICE_VIC    => int   11;
use constant _O_MAX_COST_PRICE_VIC    => int   12;
use constant _O_SUM_COST_PRICE_VIC    => int   13;
use constant _O_RANGE_COST_PRICE      => int   14;
local $\="\n";
local $,="|";
use constant LAST_ICELL => int 7;
my @I_VAL;
my @O_VAL;
my %AVERAGE;
my $key__I_PRODUCT_CODE;
my $previous_key__I_PRODUCT_CODE = undef;
foreach my $f (1..14) { $O_VAL[$f] = undef; }
# Sort:PRODUCT_CODE(asc:string) 
open(DATA, q{cat  - | sort  -t'|' -y -k 1,1 2>/dev/null |}) || die "Cannot open input: $!";
&PrintHeader();
while (<DATA>)
{
    chomp;
    @I_VAL = split("[|]", $_);
    $key__I_PRODUCT_CODE = $I_VAL[_I_PRODUCT_CODE];
    if (!defined($previous_key__I_PRODUCT_CODE))
    {
        $previous_key__I_PRODUCT_CODE = $key__I_PRODUCT_CODE;
    }
    
    elsif ($previous_key__I_PRODUCT_CODE ne $key__I_PRODUCT_CODE)
    {
        $O_VAL[_O_AVG_COST_PRICE] = ($AVERAGE{_O_AVG_COST_PRICE}{_COUNT} == 0 ? 0 : $AVERAGE{_O_AVG_COST_PRICE}{_SUM} / $AVERAGE{_O_AVG_COST_PRICE}{_COUNT});
        $O_VAL[_O_AVG_COST_PRICE_NSW] = ($AVERAGE{_O_AVG_COST_PRICE_NSW}{_COUNT} == 0 ? 0 : $AVERAGE{_O_AVG_COST_PRICE_NSW}{_SUM} / $AVERAGE{_O_AVG_COST_PRICE_NSW}{_COUNT});
        $O_VAL[_O_AVG_COST_PRICE_VIC] = ($AVERAGE{_O_AVG_COST_PRICE_VIC}{_COUNT} == 0 ? 0 : $AVERAGE{_O_AVG_COST_PRICE_VIC}{_SUM} / $AVERAGE{_O_AVG_COST_PRICE_VIC}{_COUNT});
        $O_VAL[_O_RANGE_COST_PRICE] = $O_VAL[_O_MAX_COST_PRICE] - $O_VAL[_O_MIN_COST_PRICE];
        print STDOUT
            $O_VAL[_O_PRODUCT_CODE],
            $O_VAL[_O_AVG_COST_PRICE],
            $O_VAL[_O_MIN_COST_PRICE],
            $O_VAL[_O_MAX_COST_PRICE],
            $O_VAL[_O_SUM_COST_PRICE],
            $O_VAL[_O_AVG_COST_PRICE_NSW],
            $O_VAL[_O_MIN_COST_PRICE_NSW],
            $O_VAL[_O_MAX_COST_PRICE_NSW],
            $O_VAL[_O_SUM_COST_PRICE_NSW],
            $O_VAL[_O_AVG_COST_PRICE_VIC],
            $O_VAL[_O_MIN_COST_PRICE_VIC],
            $O_VAL[_O_MAX_COST_PRICE_VIC],
            $O_VAL[_O_SUM_COST_PRICE_VIC],
            $O_VAL[_O_RANGE_COST_PRICE]
        ;
        $previous_key__I_PRODUCT_CODE = $key__I_PRODUCT_CODE;
        @O_VAL = undef;
        %AVERAGE = undef;
    }
    
    $O_VAL[_O_PRODUCT_CODE] = $I_VAL[_I_PRODUCT_CODE];
    $AVERAGE{_O_AVG_COST_PRICE}{_SUM} += $I_VAL[_I_COST_PRICE];
    $AVERAGE{_O_AVG_COST_PRICE}{_COUNT}++;
    $O_VAL[_O_MIN_COST_PRICE] = $I_VAL[_I_COST_PRICE]
        if (!defined($O_VAL[_O_MIN_COST_PRICE]) || $I_VAL[_I_COST_PRICE] < $O_VAL[_O_MIN_COST_PRICE]);
    $O_VAL[_O_MAX_COST_PRICE] = $I_VAL[_I_COST_PRICE]
        if (!defined($O_VAL[_O_MAX_COST_PRICE]) || $I_VAL[_I_COST_PRICE] > $O_VAL[_O_MAX_COST_PRICE]);
    $O_VAL[_O_SUM_COST_PRICE] += $I_VAL[_I_COST_PRICE] unless ($I_VAL[_I_COST_PRICE] eq '');
    
    if ($I_VAL[_I_LOCATION] eq 'NSW') {
        $AVERAGE{_O_AVG_COST_PRICE_NSW}{_SUM} += $I_VAL[_I_COST_PRICE];
        $AVERAGE{_O_AVG_COST_PRICE_NSW}{_COUNT}++;
        $O_VAL[_O_MIN_COST_PRICE_NSW] = $I_VAL[_I_COST_PRICE]
            if (!defined($O_VAL[_O_MIN_COST_PRICE_NSW]) || $I_VAL[_I_COST_PRICE] < $O_VAL[_O_MIN_COST_PRICE_NSW]);
        $O_VAL[_O_MAX_COST_PRICE_NSW] = $I_VAL[_I_COST_PRICE]
            if (!defined($O_VAL[_O_MAX_COST_PRICE_NSW]) || $I_VAL[_I_COST_PRICE] > $O_VAL[_O_MAX_COST_PRICE_NSW]);
        $O_VAL[_O_SUM_COST_PRICE_NSW] += $I_VAL[_I_COST_PRICE] unless ($I_VAL[_I_COST_PRICE] eq '');
    }
    elsif ($I_VAL[_I_LOCATION] eq 'VIC') {
        $AVERAGE{_O_AVG_COST_PRICE_VIC}{_SUM} += $I_VAL[_I_COST_PRICE];
        $AVERAGE{_O_AVG_COST_PRICE_VIC}{_COUNT}++;
        $O_VAL[_O_MIN_COST_PRICE_VIC] = $I_VAL[_I_COST_PRICE]
            if (!defined($O_VAL[_O_MIN_COST_PRICE_VIC]) || $I_VAL[_I_COST_PRICE] < $O_VAL[_O_MIN_COST_PRICE_VIC]);
        $O_VAL[_O_MAX_COST_PRICE_VIC] = $I_VAL[_I_COST_PRICE]
            if (!defined($O_VAL[_O_MAX_COST_PRICE_VIC]) || $I_VAL[_I_COST_PRICE] > $O_VAL[_O_MAX_COST_PRICE_VIC]);
        $O_VAL[_O_SUM_COST_PRICE_VIC] += $I_VAL[_I_COST_PRICE] unless ($I_VAL[_I_COST_PRICE] eq '');
    }
}

$O_VAL[_O_AVG_COST_PRICE] = ($AVERAGE{_O_AVG_COST_PRICE}{_COUNT} == 0 ? 0 : $AVERAGE{_O_AVG_COST_PRICE}{_SUM} / $AVERAGE{_O_AVG_COST_PRICE}{_COUNT});
$O_VAL[_O_AVG_COST_PRICE_NSW] = ($AVERAGE{_O_AVG_COST_PRICE_NSW}{_COUNT} == 0 ? 0 : $AVERAGE{_O_AVG_COST_PRICE_NSW}{_SUM} / $AVERAGE{_O_AVG_COST_PRICE_NSW}{_COUNT});
$O_VAL[_O_AVG_COST_PRICE_VIC] = ($AVERAGE{_O_AVG_COST_PRICE_VIC}{_COUNT} == 0 ? 0 : $AVERAGE{_O_AVG_COST_PRICE_VIC}{_SUM} / $AVERAGE{_O_AVG_COST_PRICE_VIC}{_COUNT});
$O_VAL[_O_RANGE_COST_PRICE] = $O_VAL[_O_MAX_COST_PRICE] - $O_VAL[_O_MIN_COST_PRICE];
print STDOUT
    $O_VAL[_O_PRODUCT_CODE],
    $O_VAL[_O_AVG_COST_PRICE],
    $O_VAL[_O_MIN_COST_PRICE],
    $O_VAL[_O_MAX_COST_PRICE],
    $O_VAL[_O_SUM_COST_PRICE],
    $O_VAL[_O_AVG_COST_PRICE_NSW],
    $O_VAL[_O_MIN_COST_PRICE_NSW],
    $O_VAL[_O_MAX_COST_PRICE_NSW],
    $O_VAL[_O_SUM_COST_PRICE_NSW],
    $O_VAL[_O_AVG_COST_PRICE_VIC],
    $O_VAL[_O_MIN_COST_PRICE_VIC],
    $O_VAL[_O_MAX_COST_PRICE_VIC],
    $O_VAL[_O_SUM_COST_PRICE_VIC],
    $O_VAL[_O_RANGE_COST_PRICE]
;
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
sub PrintHeader
{
    local $\="\n";
    local $,="|";
    print 
        'PRODUCT_CODE',
        'AVG_COST_PRICE',
        'MIN_COST_PRICE',
        'MAX_COST_PRICE',
        'SUM_COST_PRICE',
        'AVG_COST_PRICE_NSW',
        'MIN_COST_PRICE_NSW',
        'MAX_COST_PRICE_NSW',
        'SUM_COST_PRICE_NSW',
        'AVG_COST_PRICE_VIC',
        'MIN_COST_PRICE_VIC',
        'MAX_COST_PRICE_VIC',
        'SUM_COST_PRICE_VIC',
        'RANGE_COST_PRICE'
        ;
}

