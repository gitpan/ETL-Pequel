#!/usr/bin/perl
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
# vim: syntax=perl ts=4 sw=4
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#Generated By: pequel Version 2.4-5, Build: Wednesday November 16 21:56:42 GMT 2005
#            : http://sourceforge.net/projects/pequel/
#Script Name : transfer_option.pql
#Created On  : Wed Nov 16 14:22:08 2005
#Perl Version: /usr/bin/perl 5.6.1 on solaris
#For         : 
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#Options:
#prefix(examples) directory pathname prefix.
#dumpcode(1) Dump the generated Perl code for pequel script
#noverbose(1) do not progress counter
#script_name(examples/transfer_option.pql) script filename
#header(1) write header record to output.
#optimize(1) optimize generated code.
#transfer(1) Copy input (including calculated fields) to output.
#discard_header(1) Input file has header record - must be discarded.
#default_datetype(DD/MM/YYYY) default date format
#doc_title(Transfer Option Example Script) document title.
#doc_email(sample@youraddress.com) document email entry.
#doc_version(2.2) document version for pequel script.
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
use strict;
use constant _I_PRODUCT_CODE    => int    0;
use constant _I_COST_PRICE      => int    1;
use constant _I_DESCRIPTION     => int    2;
use constant _I_SALES_CODE      => int    3;
use constant _I_SALES_PRICE     => int    4;
use constant _I_SALES_QTY       => int    5;
use constant _I_SALES_DATE      => int    6;
use constant _I_LOCATION        => int    7;
use constant _I_LDESCRIPT       => int    8;
use constant _I_ZIPCODE         => int    9;
use constant _I_SALES_TOTAL     => int   10;
use constant _I_SALES_Q1        => int   11;
use constant _I_SALES_Q2        => int   12;
use constant _I_SALES_Q3        => int   13;
use constant _I_SALES_Q4        => int   14;
use constant _T_LOC_DESCRIPT_FLD_1      => int    0;
use constant _T_LOC_DESCRIPTION_FLD_1   => int    0;
use constant _T_LOC_DESCRIPTION_FLD_2   => int    1;
use constant _I_LOC_DESCRIPT_LOCATION_FLD_KEY   => int   15;
use constant _I_LOC_DESCRIPT_LOCATION_FLD_1     => int   16;
use constant _I_LOC_DESCRIPTION_LOCATION_FLD_KEY => int   17;
use constant _I_LOC_DESCRIPTION_LOCATION_FLD_1  => int   18;
use constant _I_LOC_DESCRIPTION_LOCATION_FLD_2  => int   19;
local $\="\n";
local $,="|";
use constant LAST_ICELL => int 14;
my @I_VAL;
my @O_VAL;
my %MONTH_NUM = 
(
    JAN => '01',
    FEB => '02',
    MAR => '03',
    APR => '04',
    MAY => '05',
    JUN => '06',
    JUL => '07',
    AUG => '08',
    SEP => '09',
    OCT => '10',
    NOV => '11',
    DEC => '12'
);
my %MONTH_NAME;  foreach my $m (keys %MONTH_NUM) { $MONTH_NAME{$MONTH_NUM{$m}} = $m; }
my $_TABLE_LOC_DESCRIPT = &InitLookupLOC_DESCRIPT; # ref to %$LOC_DESCRIPT hash
my $_TABLE_LOC_DESCRIPTION = &InitLookupLOC_DESCRIPTION; # ref to %$LOC_DESCRIPTION hash
&PrintHeader();
my $discard_header = <STDIN>;
while (<STDIN>)
{
    chomp;
    @I_VAL = split("[|]", $_);
    $I_VAL[_I_LDESCRIPT] = $$_TABLE_LOC_DESCRIPT{qq{$I_VAL[_I_LOCATION]}};
    $I_VAL[_I_ZIPCODE] = ${$$_TABLE_LOC_DESCRIPTION{qq{$I_VAL[_I_LOCATION]}}}[_T_LOC_DESCRIPTION_FLD_2];
    $I_VAL[_I_SALES_TOTAL] = $I_VAL[_I_SALES_PRICE] * $I_VAL[_I_SALES_QTY];
    $I_VAL[_I_SALES_Q1] = (scalar((int(substr(qq{$I_VAL[_I_SALES_DATE]}, 0, 2)) < 20 ? '20' : '19') . substr(qq{$I_VAL[_I_SALES_DATE]}, 0, 2). $MONTH_NUM{substr(qq{$I_VAL[_I_SALES_DATE]}, 2, 3)}. substr(qq{$I_VAL[_I_SALES_DATE]}, 5, 2)) >= 20020101 && scalar(substr(qq{$I_VAL[_I_SALES_DATE]}, 6, 4). substr(qq{$I_VAL[_I_SALES_DATE]}, 3, 2). substr(qq{$I_VAL[_I_SALES_DATE]}, 0, 2)) <= 20020331) ? $I_VAL[_I_SALES_TOTAL] : 0.0;
    $I_VAL[_I_SALES_Q2] = (scalar(substr(qq{$I_VAL[_I_SALES_DATE]}, 6, 4). substr(qq{$I_VAL[_I_SALES_DATE]}, 3, 2). substr(qq{$I_VAL[_I_SALES_DATE]}, 0, 2)) >= 20020401 && scalar(substr(qq{$I_VAL[_I_SALES_DATE]}, 6, 4). substr(qq{$I_VAL[_I_SALES_DATE]}, 3, 2). substr(qq{$I_VAL[_I_SALES_DATE]}, 0, 2)) <= 30030631) ? $I_VAL[_I_SALES_TOTAL] : 0.0;
    $I_VAL[_I_SALES_Q3] = (scalar(substr(qq{$I_VAL[_I_SALES_DATE]}, 6, 4). substr(qq{$I_VAL[_I_SALES_DATE]}, 3, 2). substr(qq{$I_VAL[_I_SALES_DATE]}, 0, 2)) >= 20020701 && scalar(substr(qq{$I_VAL[_I_SALES_DATE]}, 6, 4). substr(qq{$I_VAL[_I_SALES_DATE]}, 3, 2). substr(qq{$I_VAL[_I_SALES_DATE]}, 0, 2)) <= 20020931) ? $I_VAL[_I_SALES_TOTAL] : 0.0;
    $I_VAL[_I_SALES_Q4] = (scalar(substr(qq{$I_VAL[_I_SALES_DATE]}, 6, 4). substr(qq{$I_VAL[_I_SALES_DATE]}, 3, 2). substr(qq{$I_VAL[_I_SALES_DATE]}, 0, 2)) >= 20021001 && scalar(substr(qq{$I_VAL[_I_SALES_DATE]}, 6, 4). substr(qq{$I_VAL[_I_SALES_DATE]}, 3, 2). substr(qq{$I_VAL[_I_SALES_DATE]}, 0, 2)) <= 20021231) ? $I_VAL[_I_SALES_TOTAL] : 0.0;
    print STDOUT
        @I_VAL[0..LAST_ICELL]
    ;
}

close(STDIN);
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#++++++ Table LOC_DESCRIPT --> Type :ETL::Pequel::Type::Table::Local ++++++
sub InitLookupLOC_DESCRIPT
{
    my %_TABLE_LOC_DESCRIPT;
    %_TABLE_LOC_DESCRIPT =
    (
        'ALIC' => 'Alice Springs',
        'MEL' => 'Melbourne',
        'NSW' => 'New South Wales',
        'NT' => 'Northern Territory',
        'PER' => 'Perth',
        'QLD' => 'Queensland',
        'SA' => 'South Australia',
        'SYD' => 'Sydney',
        'VIC' => 'Victoria',
        'WA' => 'Western Australia'
    );
    return \%_TABLE_LOC_DESCRIPT;
}

#++++++ Table LOC_DESCRIPTION --> Type :ETL::Pequel::Type::Table::Local ++++++
sub InitLookupLOC_DESCRIPTION
{
    my %_TABLE_LOC_DESCRIPTION;
    %_TABLE_LOC_DESCRIPTION =
    (
        'NSW' => ['New South Wales', '2061'],
        'QLD' => ['Queensland', '6099'],
        'SA' => ['South Australia', '3023'],
        'WA' => ['Western Australia', '4001']
    );
    return \%_TABLE_LOC_DESCRIPTION;
}

sub PrintHeader
{
    local $\="\n";
    local $,="|";
    print STDOUT
        'PRODUCT_CODE',
        'COST_PRICE',
        'DESCRIPTION',
        'SALES_CODE',
        'SALES_PRICE',
        'SALES_QTY',
        'SALES_DATE',
        'LOCATION',
        'LDESCRIPT',
        'ZIPCODE',
        'SALES_TOTAL',
        'SALES_Q1',
        'SALES_Q2',
        'SALES_Q3',
        'SALES_Q4'
        ;
}

