#!/usr/bin/perl
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
# vim: syntax=perl ts=4 sw=4
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#Generated By: pequel Version 2.4-6, Build: Wednesday November 23 21:56:42 GMT 2005
#            : http://sourceforge.net/projects/pequel/
#Script Name : output_combiner.pql
#Created On  : Wed Nov 23 10:45:21 2005
#Perl Version: /usr/bin/perl 5.6.1 on solaris
#For         : 
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#Options:
#prefix(examples) directory pathname prefix.
#dumpcode(1) Dump the generated Perl code for pequel script
#noverbose(1) do not progress counter
#script_name(examples/output_combiner.pql) script filename
#input_file(copy_output.pql) input data filename
#optimize(1) optimize generated code.
#doc_title(Output Combiner Example Script) document title.
#doc_email(sample@youraddress.com) document email entry.
#doc_version(2.3) document version for pequel script.
#show_synonyms(0) Show field names in generated code.
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
use strict;
use constant _I_LOCATION           => int    0;
use constant _I_DESCRIPTION        => int    1;
use constant _I_SALES_TOTAL        => int    2;
use constant _I_SALES_TOTAL_FMT    => int    3;
use constant _O_SALES_TOTAL        => int    1;
use constant _O_LOCATION           => int    2;
use constant _O_DESCRIPTION        => int    3;
local $\="\n";
local $,="|";
use constant LAST_ICELL => int 3;
my @I_VAL;
my @O_VAL;
foreach my $f (1..3) { $O_VAL[$f] = undef; }
if (open(READ_COPY_OUTPUT, '-|') == 0) # Fork -- read from child
{
    &p_read_copy_output::read_copy_output;
    exit(0);
}

while (<READ_COPY_OUTPUT>)
{
    chomp;
    @I_VAL = split("[|]", $_);
    next unless ($I_VAL[1] !~ /State\s+Total/i);
    $I_VAL[3] = sprintf("%16s",&{sub
{
    my $idec = index(sprintf("%.2f",$I_VAL[2]), '.');
    my $dec = $idec > 0 ? substr(sprintf("%.2f",$I_VAL[2]), $idec) : '';
    my $txt = reverse($idec > 0 ? substr(sprintf("%.2f",$I_VAL[2]), 0, $idec) : sprintf("%.2f",$I_VAL[2]));
    $txt =~ s/(\d\d\d)(?=\d)(?!\d*\.)/$1,/g;
    return (scalar reverse $txt) . $dec;
}}
);
    $O_VAL[1] = $I_VAL[3];
    $O_VAL[2] = $I_VAL[0];
    $O_VAL[3] = $I_VAL[1];
    print STDOUT
        $O_VAL[1],
        $O_VAL[2],
        $O_VAL[3]
    ;
}

close(READ_COPY_OUTPUT);
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
{
    package p_read_copy_output;
    sub read_copy_output
    {
#    !/usr/bin/perl
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#     vim: syntax=perl ts=4 sw=4
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#    Generated By: pequel Version 2.4-6, Build: Wednesday November 23 21:56:42 GMT 2005
#                : http://sourceforge.net/projects/pequel/
#    Script Name : copy_output.pql
#    Created On  : Wed Nov 23 10:45:20 2005
#    Perl Version: /usr/bin/perl 5.6.1 on solaris
#    For         : 
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#    Options:
#        input_file(chain_pequel_pt1.pql) input data filename
#        optimize(1) optimize generated code.
#        doc_title(Copy Output Record Example Script) document title.
#        doc_email(sample@youraddress.com) document email entry.
#        doc_version(2.3) document version for pequel script.
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        use strict;
        use Fcntl ':flock';
        use constant _I_LOCATION         => int    0;
        use constant _I_PRODUCT_CODE     => int    1;
        use constant _I_SALES_TOTAL      => int    2;
        use constant _I_LOCATION_DESC    => int    3;
        use constant _I_DESCRIPTION      => int    4;
        use constant _O_LOCATION         => int    1;
        use constant _O_DESCRIPTION      => int    2;
        use constant _O_SALES_TOTAL      => int    3;
        use constant _T_LOC_DESCRIPT_FLD_1   => int    0;
        use constant _I_LOC_DESCRIPT_LOCATION_FLD_KEY => int    5;
        use constant _I_LOC_DESCRIPT_LOCATION_FLD_1  => int    6;
        local $\="\n";
        local $,="|";
        use constant VERBOSE => int 10000;
        use constant LAST_ICELL => int 4;
        my @I_VAL;
        my @O_VAL;
        my $key_0;
        my $previous_key_0 = undef;
        foreach my $f (1..3) { $O_VAL[$f] = undef; }
        my $_TABLE_LOC_DESCRIPT = &InitLookupLOC_DESCRIPT; # ref to %$LOC_DESCRIPT hash
        if (open(READ_CHAIN_PEQUEL_PT1, '-|') == 0) # Fork -- read from child
        {
            &p_read_chain_pequel_pt1::read_chain_pequel_pt1;
            exit(0);
        }
        
        open(STDOUT, '|-', q{sort  -t'|' -y -k 3nr,3nr 2>/dev/null});
        if (open(COPY_OUTPUT_WA, '|-') == 0) # Fork -- write to child
        {
            &p_copy_output_wa::copy_output_wa;
            exit(0);
        }
        
        if (open(COPY_OUTPUT_SA, '|-') == 0) # Fork -- write to child
        {
            &p_copy_output_sa::copy_output_sa;
            exit(0);
        }
        
        if (open(COPY_OUTPUT_NSW, '|-') == 0) # Fork -- write to child
        {
            &p_copy_output_nsw::copy_output_nsw;
            exit(0);
        }
        
        if (open(COPY_OUTPUT_VIC, '|-') == 0) # Fork -- write to child
        {
            &p_copy_output_vic::copy_output_vic;
            exit(0);
        }
        
        if (open(COPY_OUTPUT_NT, '|-') == 0) # Fork -- write to child
        {
            &p_copy_output_nt::copy_output_nt;
            exit(0);
        }
        
        while (<READ_CHAIN_PEQUEL_PT1>)
        {
            chomp;
            @I_VAL = split("[|]", $_);
            next unless ($I_VAL[0] eq 'WA' || $I_VAL[0] eq 'SA' || $I_VAL[0] eq 'NSW' || $I_VAL[0] eq 'VIC' || $I_VAL[0] eq 'NT');
            if (($I_VAL[0] eq 'WA'))
            {
                print COPY_OUTPUT_WA $_;
                next;
            }
            
            if (($I_VAL[0] eq 'SA'))
            {
                print COPY_OUTPUT_SA $_;
                next;
            }
            
            if (($I_VAL[0] eq 'NSW'))
            {
                print COPY_OUTPUT_NSW $_;
                next;
            }
            
            if (($I_VAL[0] eq 'VIC'))
            {
                print COPY_OUTPUT_VIC $_;
                next;
            }
            
            if (($I_VAL[0] eq 'NT'))
            {
                print COPY_OUTPUT_NT $_;
                next;
            }
            
            $key_0 = $I_VAL[0];
            if (!defined($previous_key_0))
            {
                $previous_key_0 = $key_0;
            }
            
            elsif ($previous_key_0 ne $key_0)
            {
                flock(STDOUT, LOCK_EX);
                print STDOUT
                    $O_VAL[1],
                    $O_VAL[2],
                    $O_VAL[3]
                if
                (
                    $O_VAL[3] > 0
                );
                flock(STDOUT, LOCK_UN);
                $previous_key_0 = $key_0;
                @O_VAL = undef;
            }
            
            $I_VAL[3] = $$_TABLE_LOC_DESCRIPT{qq{$I_VAL[0]}};
            $O_VAL[1] = $I_VAL[3];
            $I_VAL[4] = 'State Total';
            $O_VAL[2] = $I_VAL[4];
            $O_VAL[3] += $I_VAL[2] unless ($I_VAL[2] eq '');
        }
        
        flock(STDOUT, LOCK_EX);
        print STDOUT
            $O_VAL[1],
            $O_VAL[2],
            $O_VAL[3]
        if
        (
            $O_VAL[3] > 0
        );
        flock(STDOUT, LOCK_UN);
        close(COPY_OUTPUT_NT);
        close(COPY_OUTPUT_VIC);
        close(COPY_OUTPUT_NSW);
        close(COPY_OUTPUT_SA);
        close(COPY_OUTPUT_WA);
        close(STDOUT);
        close(READ_CHAIN_PEQUEL_PT1);
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#    ++++++ Table LOC_DESCRIPT --> Type :ETL::Pequel::Type::Table::Local ++++++
        sub InitLookupLOC_DESCRIPT
        {
            my %_TABLE_LOC_DESCRIPT;
            %_TABLE_LOC_DESCRIPT =
            (
                'NSW' => 'New South Wales',
                'NT' => 'Northern Territory',
                'QLD' => 'Queensland',
                'SA' => 'South Australia',
                'VIC' => 'Victoria',
                'WA' => 'Western Australia'
            );
            return \%_TABLE_LOC_DESCRIPT;
        }
        
    }
    
}

{
    package p_copy_output_wa;
    sub copy_output_wa
    {
#    !/usr/bin/perl
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#     vim: syntax=perl ts=4 sw=4
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#    Generated By: pequel Version 2.4-6, Build: Wednesday November 23 21:56:42 GMT 2005
#                : http://sourceforge.net/projects/pequel/
#    Script Name : copy_output_WA.pql
#    Created On  : Wed Nov 23 10:45:13 2005
#    Perl Version: /usr/bin/perl 5.6.1 on solaris
#    For         : 
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#    Options:
#        optimize(1) optimize generated code.
#        hash(1) Generate in memory. Input data can be unsorted.
#        doc_title(Copy Output Record Example Script) document title.
#        doc_email(sample@youraddress.com) document email entry.
#        doc_version(2.3) document version for pequel script.
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        use strict;
        use Fcntl ':flock';
        use constant _I_LOCATION         => int    0;
        use constant _I_PRODUCT_CODE     => int    1;
        use constant _I_SALES_TOTAL      => int    2;
        use constant _I_LOCATION_NAME    => int    3;
        use constant _O_LOCATION_NAME    => int    1;
        use constant _O_PRODUCT_CODE     => int    2;
        use constant _O_SALES_TOTAL      => int    3;
        local $\="\n";
        local $,="|";
        use constant VERBOSE => int 10000;
        use constant LAST_ICELL => int 3;
        my @I_VAL;
        my %O_VAL;
        my $key;
        if (open(COPY_OUTPUT_COMBINER, '|-') == 0) # Fork -- write to child
        {
            &p_copy_output_combiner::copy_output_combiner;
            exit(0);
        }
        
        while (<STDIN>)
        {
            chomp;
            @I_VAL = split("[|]", $_);
            $key = ( $I_VAL[1] );
            $I_VAL[3] = 'Western Australia';
            $O_VAL{$key}{1} = $I_VAL[3];
            $O_VAL{$key}{2} = $I_VAL[1];
            $O_VAL{$key}{3} += $I_VAL[2] unless ($I_VAL[2] eq '');
        }
        
        foreach $key (sort  keys %O_VAL)
        {
            flock(STDOUT, LOCK_EX);
            print STDOUT
                $O_VAL{$key}{1},
                $O_VAL{$key}{2},
                $O_VAL{$key}{3}
            ;
            flock(STDOUT, LOCK_UN);
            if ($O_VAL{$key}{3} > 0)
            {
                flock(COPY_OUTPUT_COMBINER, LOCK_EX);
                print COPY_OUTPUT_COMBINER
                    $O_VAL{$key}{1},
                    $O_VAL{$key}{2},
                    $O_VAL{$key}{3}
                ;
                flock(COPY_OUTPUT_COMBINER, LOCK_UN);
            }
            
        }
        
        close(COPY_OUTPUT_COMBINER);
        close(STDIN);
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    }
    
}

{
    package p_copy_output_nt;
    sub copy_output_nt
    {
#    !/usr/bin/perl
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#     vim: syntax=perl ts=4 sw=4
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#    Generated By: pequel Version 2.4-6, Build: Wednesday November 23 21:56:42 GMT 2005
#                : http://sourceforge.net/projects/pequel/
#    Script Name : copy_output_NT.pql
#    Created On  : Wed Nov 23 10:45:20 2005
#    Perl Version: /usr/bin/perl 5.6.1 on solaris
#    For         : 
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#    Options:
#        optimize(1) optimize generated code.
#        hash(1) Generate in memory. Input data can be unsorted.
#        doc_title(Copy Output Record Example Script) document title.
#        doc_email(sample@youraddress.com) document email entry.
#        doc_version(2.3) document version for pequel script.
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        use strict;
        use Fcntl ':flock';
        use constant _I_LOCATION         => int    0;
        use constant _I_PRODUCT_CODE     => int    1;
        use constant _I_SALES_TOTAL      => int    2;
        use constant _I_LOCATION_NAME    => int    3;
        use constant _O_LOCATION_NAME    => int    1;
        use constant _O_PRODUCT_CODE     => int    2;
        use constant _O_SALES_TOTAL      => int    3;
        local $\="\n";
        local $,="|";
        use constant VERBOSE => int 10000;
        use constant LAST_ICELL => int 3;
        my @I_VAL;
        my %O_VAL;
        my $key;
        if (open(COPY_OUTPUT_COMBINER, '|-') == 0) # Fork -- write to child
        {
            &p_copy_output_combiner::copy_output_combiner;
            exit(0);
        }
        
        while (<STDIN>)
        {
            chomp;
            @I_VAL = split("[|]", $_);
            $key = ( $I_VAL[1] );
            $I_VAL[3] = 'Northern Territory';
            $O_VAL{$key}{1} = $I_VAL[3];
            $O_VAL{$key}{2} = $I_VAL[1];
            $O_VAL{$key}{3} += $I_VAL[2] unless ($I_VAL[2] eq '');
        }
        
        foreach $key (sort  keys %O_VAL)
        {
            flock(STDOUT, LOCK_EX);
            print STDOUT
                $O_VAL{$key}{1},
                $O_VAL{$key}{2},
                $O_VAL{$key}{3}
            ;
            flock(STDOUT, LOCK_UN);
            if ($O_VAL{$key}{3} > 0)
            {
                flock(COPY_OUTPUT_COMBINER, LOCK_EX);
                print COPY_OUTPUT_COMBINER
                    $O_VAL{$key}{1},
                    $O_VAL{$key}{2},
                    $O_VAL{$key}{3}
                ;
                flock(COPY_OUTPUT_COMBINER, LOCK_UN);
            }
            
        }
        
        close(COPY_OUTPUT_COMBINER);
        close(STDIN);
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    }
    
}

{
    package p_read_chain_pequel_pt1;
    sub read_chain_pequel_pt1
    {
#    !/usr/bin/perl
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#     vim: syntax=perl ts=4 sw=4
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#    Generated By: pequel Version 2.4-6, Build: Wednesday November 23 21:56:42 GMT 2005
#                : http://sourceforge.net/projects/pequel/
#    Script Name : chain_pequel_pt1.pql
#    Created On  : Wed Nov 23 10:45:10 2005
#    Perl Version: /usr/bin/perl 5.6.1 on solaris
#    For         : 
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#    Options:
#        input_file(sample.data) input data filename
#        optimize(1) optimize generated code.
#        doc_title(Pequel Chaining Part-1 Example Script) document title.
#        doc_email(sample@youraddress.com) document email entry.
#        doc_version(2.3) document version for pequel script.
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        use strict;
        use constant _I_PRODUCT_CODE    => int    0;
        use constant _I_COST_PRICE      => int    1;
        use constant _I_DESCRIPTION     => int    2;
        use constant _I_SALES_CODE      => int    3;
        use constant _I_SALES_PRICE     => int    4;
        use constant _I_SALES_QTY       => int    5;
        use constant _I_SALES_DATE      => int    6;
        use constant _I_LOCATION        => int    7;
        use constant _I_SALES_TOTAL     => int    8;
        use constant _O_LOCATION        => int    1;
        use constant _O_PRODUCT_CODE    => int    2;
        use constant _O_SALES_TOTAL     => int    3;
        local $\="\n";
        local $,="|";
        use constant VERBOSE => int 10000;
        use constant LAST_ICELL => int 8;
        my @I_VAL;
        my @O_VAL;
        my $key_7;
        my $previous_key_7 = undef;
        my $key_0;
        my $previous_key_0 = undef;
        foreach my $f (1..3) { $O_VAL[$f] = undef; }
#     Sort:LOCATION(asc:string) PRODUCT_CODE(asc:string) 
        open(DATA, q{sort  -t'|' -y -k 8,8 -k 1,1 examples/sample.data 2>/dev/null |});
        open(STDOUT, '|-', q{sort  -t'|' -y -k 1,1 2>/dev/null});
        while (<DATA>)
        {
            chomp;
            @I_VAL = split("[|]", $_);
            $key_7 = $I_VAL[7];
            $key_0 = $I_VAL[0];
            if (!defined($previous_key_7) || !defined($previous_key_0))
            {
                $previous_key_7 = $key_7;
                $previous_key_0 = $key_0;
            }
            
            elsif ($previous_key_7 ne $key_7 || $previous_key_0 ne $key_0)
            {
                print STDOUT
                    $O_VAL[1],
                    $O_VAL[2],
                    $O_VAL[3]
                ;
                $previous_key_7 = $key_7;
                $previous_key_0 = $key_0;
                @O_VAL = undef;
            }
            
            $O_VAL[1] = $I_VAL[7];
            $O_VAL[2] = $I_VAL[0];
            $I_VAL[8] = $I_VAL[5] * $I_VAL[4];
            $O_VAL[3] += $I_VAL[8] unless ($I_VAL[8] eq '');
        }
        
        print STDOUT
            $O_VAL[1],
            $O_VAL[2],
            $O_VAL[3]
        ;
        close(STDOUT);
        close(DATA);
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    }
    
}

{
    package p_copy_output_combiner;
    sub copy_output_combiner
    {
#    !/usr/bin/perl
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#     vim: syntax=perl ts=4 sw=4
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#    Generated By: pequel Version 2.4-6, Build: Wednesday November 23 21:56:42 GMT 2005
#                : http://sourceforge.net/projects/pequel/
#    Script Name : copy_output_combiner.pql
#    Created On  : Wed Nov 23 10:45:13 2005
#    Perl Version: /usr/bin/perl 5.6.1 on solaris
#    For         : 
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#    Options:
#        optimize(1) optimize generated code.
#        doc_title(Copy Output Record Example Script) document title.
#        doc_email(sample@youraddress.com) document email entry.
#        doc_version(2.3) document version for pequel script.
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        use strict;
        use Fcntl ':flock';
        use constant _I_LOCATION_NAME    => int    0;
        use constant _I_PRODUCT_CODE     => int    1;
        use constant _I_SALES_TOTAL      => int    2;
        use constant _I_DESCRIPTION      => int    3;
        use constant _O_LOCATION_NAME    => int    1;
        use constant _O_DESCRIPTION      => int    2;
        use constant _O_SALES_TOTAL      => int    3;
        local $\="\n";
        local $,="|";
        use constant VERBOSE => int 10000;
        use constant LAST_ICELL => int 3;
        my @I_VAL;
        my @O_VAL;
        my $key_0;
        my $previous_key_0 = undef;
        foreach my $f (1..3) { $O_VAL[$f] = undef; }
#     Sort:LOCATION_NAME(asc:string) 
        open(DATA, q{cat  - | sort  -t'|' -y -k 1,1 2>/dev/null |}) || die "Cannot open input: $!";
        while (<DATA>)
        {
            chomp;
            @I_VAL = split("[|]", $_);
            $key_0 = $I_VAL[0];
            if (!defined($previous_key_0))
            {
                $previous_key_0 = $key_0;
            }
            
            elsif ($previous_key_0 ne $key_0)
            {
                flock(STDOUT, LOCK_EX);
                print STDOUT
                    $O_VAL[1],
                    $O_VAL[2],
                    $O_VAL[3]
                ;
                flock(STDOUT, LOCK_UN);
                $previous_key_0 = $key_0;
                @O_VAL = undef;
            }
            
            $O_VAL[1] = $I_VAL[0];
            $I_VAL[3] = 'State Total';
            $O_VAL[2] = $I_VAL[3];
            $O_VAL[3] += $I_VAL[2] unless ($I_VAL[2] eq '');
        }
        
        flock(STDOUT, LOCK_EX);
        print STDOUT
            $O_VAL[1],
            $O_VAL[2],
            $O_VAL[3]
        ;
        flock(STDOUT, LOCK_UN);
        close(DATA);
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    }
    
}

{
    package p_copy_output_vic;
    sub copy_output_vic
    {
#    !/usr/bin/perl
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#     vim: syntax=perl ts=4 sw=4
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#    Generated By: pequel Version 2.4-6, Build: Wednesday November 23 21:56:42 GMT 2005
#                : http://sourceforge.net/projects/pequel/
#    Script Name : copy_output_VIC.pql
#    Created On  : Wed Nov 23 10:45:18 2005
#    Perl Version: /usr/bin/perl 5.6.1 on solaris
#    For         : 
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#    Options:
#        optimize(1) optimize generated code.
#        hash(1) Generate in memory. Input data can be unsorted.
#        doc_title(Copy Output Record Example Script) document title.
#        doc_email(sample@youraddress.com) document email entry.
#        doc_version(2.3) document version for pequel script.
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        use strict;
        use Fcntl ':flock';
        use constant _I_LOCATION         => int    0;
        use constant _I_PRODUCT_CODE     => int    1;
        use constant _I_SALES_TOTAL      => int    2;
        use constant _I_LOCATION_NAME    => int    3;
        use constant _O_LOCATION_NAME    => int    1;
        use constant _O_PRODUCT_CODE     => int    2;
        use constant _O_SALES_TOTAL      => int    3;
        local $\="\n";
        local $,="|";
        use constant VERBOSE => int 10000;
        use constant LAST_ICELL => int 3;
        my @I_VAL;
        my %O_VAL;
        my $key;
        if (open(COPY_OUTPUT_COMBINER, '|-') == 0) # Fork -- write to child
        {
            &p_copy_output_combiner::copy_output_combiner;
            exit(0);
        }
        
        while (<STDIN>)
        {
            chomp;
            @I_VAL = split("[|]", $_);
            $key = ( $I_VAL[1] );
            $I_VAL[3] = 'Victoria';
            $O_VAL{$key}{1} = $I_VAL[3];
            $O_VAL{$key}{2} = $I_VAL[1];
            $O_VAL{$key}{3} += $I_VAL[2] unless ($I_VAL[2] eq '');
        }
        
        foreach $key (sort  keys %O_VAL)
        {
            flock(STDOUT, LOCK_EX);
            print STDOUT
                $O_VAL{$key}{1},
                $O_VAL{$key}{2},
                $O_VAL{$key}{3}
            ;
            flock(STDOUT, LOCK_UN);
            if ($O_VAL{$key}{3} > 0)
            {
                flock(COPY_OUTPUT_COMBINER, LOCK_EX);
                print COPY_OUTPUT_COMBINER
                    $O_VAL{$key}{1},
                    $O_VAL{$key}{2},
                    $O_VAL{$key}{3}
                ;
                flock(COPY_OUTPUT_COMBINER, LOCK_UN);
            }
            
        }
        
        close(COPY_OUTPUT_COMBINER);
        close(STDIN);
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    }
    
}

{
    package p_copy_output_nsw;
    sub copy_output_nsw
    {
#    !/usr/bin/perl
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#     vim: syntax=perl ts=4 sw=4
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#    Generated By: pequel Version 2.4-6, Build: Wednesday November 23 21:56:42 GMT 2005
#                : http://sourceforge.net/projects/pequel/
#    Script Name : copy_output_NSW.pql
#    Created On  : Wed Nov 23 10:45:17 2005
#    Perl Version: /usr/bin/perl 5.6.1 on solaris
#    For         : 
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#    Options:
#        optimize(1) optimize generated code.
#        hash(1) Generate in memory. Input data can be unsorted.
#        doc_title(Copy Output Record Example Script) document title.
#        doc_email(sample@youraddress.com) document email entry.
#        doc_version(2.3) document version for pequel script.
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        use strict;
        use Fcntl ':flock';
        use constant _I_LOCATION         => int    0;
        use constant _I_PRODUCT_CODE     => int    1;
        use constant _I_SALES_TOTAL      => int    2;
        use constant _I_LOCATION_NAME    => int    3;
        use constant _O_LOCATION_NAME    => int    1;
        use constant _O_PRODUCT_CODE     => int    2;
        use constant _O_SALES_TOTAL      => int    3;
        local $\="\n";
        local $,="|";
        use constant VERBOSE => int 10000;
        use constant LAST_ICELL => int 3;
        my @I_VAL;
        my %O_VAL;
        my $key;
        if (open(COPY_OUTPUT_COMBINER, '|-') == 0) # Fork -- write to child
        {
            &p_copy_output_combiner::copy_output_combiner;
            exit(0);
        }
        
        while (<STDIN>)
        {
            chomp;
            @I_VAL = split("[|]", $_);
            $key = ( $I_VAL[1] );
            $I_VAL[3] = 'New South Wales';
            $O_VAL{$key}{1} = $I_VAL[3];
            $O_VAL{$key}{2} = $I_VAL[1];
            $O_VAL{$key}{3} += $I_VAL[2] unless ($I_VAL[2] eq '');
        }
        
        foreach $key (sort  keys %O_VAL)
        {
            flock(STDOUT, LOCK_EX);
            print STDOUT
                $O_VAL{$key}{1},
                $O_VAL{$key}{2},
                $O_VAL{$key}{3}
            ;
            flock(STDOUT, LOCK_UN);
            if ($O_VAL{$key}{3} > 0)
            {
                flock(COPY_OUTPUT_COMBINER, LOCK_EX);
                print COPY_OUTPUT_COMBINER
                    $O_VAL{$key}{1},
                    $O_VAL{$key}{2},
                    $O_VAL{$key}{3}
                ;
                flock(COPY_OUTPUT_COMBINER, LOCK_UN);
            }
            
        }
        
        close(COPY_OUTPUT_COMBINER);
        close(STDIN);
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    }
    
}

{
    package p_copy_output_sa;
    sub copy_output_sa
    {
#    !/usr/bin/perl
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#     vim: syntax=perl ts=4 sw=4
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#    Generated By: pequel Version 2.4-6, Build: Wednesday November 23 21:56:42 GMT 2005
#                : http://sourceforge.net/projects/pequel/
#    Script Name : copy_output_SA.pql
#    Created On  : Wed Nov 23 10:45:15 2005
#    Perl Version: /usr/bin/perl 5.6.1 on solaris
#    For         : 
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#    Options:
#        optimize(1) optimize generated code.
#        hash(1) Generate in memory. Input data can be unsorted.
#        doc_title(Copy Output Record Example Script) document title.
#        doc_email(sample@youraddress.com) document email entry.
#        doc_version(2.3) document version for pequel script.
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        use strict;
        use Fcntl ':flock';
        use constant _I_LOCATION         => int    0;
        use constant _I_PRODUCT_CODE     => int    1;
        use constant _I_SALES_TOTAL      => int    2;
        use constant _I_LOCATION_NAME    => int    3;
        use constant _O_LOCATION_NAME    => int    1;
        use constant _O_PRODUCT_CODE     => int    2;
        use constant _O_SALES_TOTAL      => int    3;
        local $\="\n";
        local $,="|";
        use constant VERBOSE => int 10000;
        use constant LAST_ICELL => int 3;
        my @I_VAL;
        my %O_VAL;
        my $key;
        if (open(COPY_OUTPUT_COMBINER, '|-') == 0) # Fork -- write to child
        {
            &p_copy_output_combiner::copy_output_combiner;
            exit(0);
        }
        
        while (<STDIN>)
        {
            chomp;
            @I_VAL = split("[|]", $_);
            $key = ( $I_VAL[1] );
            $I_VAL[3] = 'South Australia';
            $O_VAL{$key}{1} = $I_VAL[3];
            $O_VAL{$key}{2} = $I_VAL[1];
            $O_VAL{$key}{3} += $I_VAL[2] unless ($I_VAL[2] eq '');
        }
        
        foreach $key (sort  keys %O_VAL)
        {
            flock(STDOUT, LOCK_EX);
            print STDOUT
                $O_VAL{$key}{1},
                $O_VAL{$key}{2},
                $O_VAL{$key}{3}
            ;
            flock(STDOUT, LOCK_UN);
            if ($O_VAL{$key}{3} > 0)
            {
                flock(COPY_OUTPUT_COMBINER, LOCK_EX);
                print COPY_OUTPUT_COMBINER
                    $O_VAL{$key}{1},
                    $O_VAL{$key}{2},
                    $O_VAL{$key}{3}
                ;
                flock(COPY_OUTPUT_COMBINER, LOCK_UN);
            }
            
        }
        
        close(COPY_OUTPUT_COMBINER);
        close(STDIN);
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    }
    
}

