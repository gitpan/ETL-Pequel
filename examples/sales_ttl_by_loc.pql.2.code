#!/usr/bin/perl
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
# vim: syntax=perl ts=4 sw=4
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#Generated By: pequel Version 2.4-5, Build: Wednesday November 16 21:56:42 GMT 2005
#            : http://sourceforge.net/projects/pequel/
#Script Name : sales_ttl_by_loc.pql
#Created On  : Wed Nov 16 14:19:16 2005
#Perl Version: /usr/bin/perl 5.6.1 on solaris
#For         : 
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#Options:
#prefix(examples) directory pathname prefix.
#dumpcode(1) Dump the generated Perl code for pequel script
#noverbose(1) do not progress counter
#script_name(examples/sales_ttl_by_loc.pql) script filename
#input_file(sample.data) input data filename
#header(1) write header record to output.
#optimize(1) optimize generated code.
#hash(1) Generate in memory. Input data can be unsorted.
#doc_title(Pequel Table Example Script) document title.
#doc_email(sample@youraddress.com) document email entry.
#doc_version(2.3) document version for pequel script.
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
use strict;
use constant _I_PRODUCT_CODE    => int    0;
use constant _I_COST_PRICE      => int    1;
use constant _I_DESCRIPTION     => int    2;
use constant _I_SALES_CODE      => int    3;
use constant _I_SALES_PRICE     => int    4;
use constant _I_SALES_QTY       => int    5;
use constant _I_SALES_DATE      => int    6;
use constant _I_LOCATION        => int    7;
use constant _I_SALES_TOTAL     => int    8;
use constant _I_TOP_PRODUCT     => int    9;
use constant _O_LOCATION        => int    1;
use constant _O_SALES_TOTAL     => int    2;
use constant _O_TOP_PRODUCT     => int    3;
use constant _T_TTOPPRODBYLOC_FLD_PRODUCT_CODE   => int    0;
use constant _I_TTOPPRODBYLOC_LOCATION_FLD_KEY           => int   10;
use constant _I_TTOPPRODBYLOC_LOCATION_FLD_PRODUCT_CODE  => int   11;
local $\="\n";
local $,="|";
use constant LAST_ICELL => int 9;
my @I_VAL;
my %O_VAL;
my $key;
my $_TABLE_TTOPPRODBYLOC = &LoadTableTTOPPRODBYLOC; # ref to %$TTOPPRODBYLOC hash
open(DATA, q{examples/sample.data})|| die "Cannot open examples/sample.data: $!";
&PrintHeader();
while (<DATA>)
{
    chomp;
    @I_VAL = split("[|]", $_);
    $key = ( $I_VAL[_I_LOCATION] );
    $O_VAL{$key}{_O_LOCATION} = $I_VAL[_I_LOCATION];
    $I_VAL[_I_SALES_TOTAL] = $I_VAL[_I_SALES_QTY] * $I_VAL[_I_SALES_PRICE];
    $O_VAL{$key}{_O_SALES_TOTAL} += $I_VAL[_I_SALES_TOTAL] unless ($I_VAL[_I_SALES_TOTAL] eq '');
    $I_VAL[_I_TOP_PRODUCT] = $$_TABLE_TTOPPRODBYLOC{qq{$I_VAL[_I_LOCATION]}};
    $O_VAL{$key}{_O_TOP_PRODUCT} = $I_VAL[_I_TOP_PRODUCT];
}

foreach $key (sort  keys %O_VAL)
{
    print STDOUT
        $O_VAL{$key}{_O_LOCATION},
        $O_VAL{$key}{_O_SALES_TOTAL},
        $O_VAL{$key}{_O_TOP_PRODUCT}
    ;
}

close(DATA);
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#++++++ Table TTOPPRODBYLOC --> Type :ETL::Pequel::Type::Table::External::Pequel ++++++
sub LoadTableTTOPPRODBYLOC
{
    my %_TABLE_TTOPPRODBYLOC;
    my $pid = open(TTOPPRODBYLOC, '-|'); # Fork
    my $count=0;
    if ($pid) # Parent
    {
        while (<TTOPPRODBYLOC>)
        {
            chomp;
            my (@flds) = split("[|]", $_, -1);
            $_TABLE_TTOPPRODBYLOC{$flds[0]} = $flds[ 1 ];
        }
        
        $count=$.;
        close(TTOPPRODBYLOC);
    }
    
    else # Child
    {
        &p_LoadTableTTOPPRODBYLOC::LoadTableTTOPPRODBYLOC;
        exit(0);
    }
    
    close(TTOPPRODBYLOC);
    return \%_TABLE_TTOPPRODBYLOC;
}


{
    package p_LoadTableTTOPPRODBYLOC;
    sub LoadTableTTOPPRODBYLOC
    {
#    !/usr/bin/perl
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#     vim: syntax=perl ts=4 sw=4
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#    Generated By: pequel Version 2.4-5, Build: Wednesday November 16 21:56:42 GMT 2005
#                : http://sourceforge.net/projects/pequel/
#    Script Name : top_prod_by_loc.pql
#    Created On  : Wed Nov 16 14:19:15 2005
#    Perl Version: /usr/bin/perl 5.6.1 on solaris
#    For         : 
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#    Options:
#        input_file(sample.data) input data filename
#        header(1) write header record to output.
#        optimize(1) optimize generated code.
#        hash(1) Generate in memory. Input data can be unsorted.
#        doc_title(Pequel Table Example Script) document title.
#        doc_email(sample@youraddress.com) document email entry.
#        doc_version(2.3) document version for pequel script.
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        use strict;
        use constant _I_PRODUCT_CODE    => int    0;
        use constant _I_COST_PRICE      => int    1;
        use constant _I_DESCRIPTION     => int    2;
        use constant _I_SALES_CODE      => int    3;
        use constant _I_SALES_PRICE     => int    4;
        use constant _I_SALES_QTY       => int    5;
        use constant _I_SALES_DATE      => int    6;
        use constant _I_LOCATION        => int    7;
        use constant _I_SALES_TOTAL     => int    8;
        use constant _O_LOCATION        => int    1;
        use constant _O__MAXSALES       => int    2;
        use constant _O_PRODUCT_CODE    => int    3;
        local $\="\n";
        local $,="|";
        use constant VERBOSE => int 10000;
        use constant LAST_ICELL => int 8;
        my @I_VAL;
        my %O_VAL;
        my $key;
        open(DATA, q{examples/sample.data})|| die "Cannot open examples/sample.data: $!";
        &PrintHeader();
        while (<DATA>)
        {
            chomp;
            @I_VAL = split("[|]", $_);
            $key = ( $I_VAL[_I_LOCATION] );
            $O_VAL{$key}{_O_LOCATION} = $I_VAL[_I_LOCATION];
            $I_VAL[_I_SALES_TOTAL] = $I_VAL[_I_SALES_QTY] * $I_VAL[_I_SALES_PRICE];
            $O_VAL{$key}{_O__MAXSALES} = $I_VAL[_I_SALES_TOTAL]
                if (!defined($O_VAL{$key}{_O__MAXSALES}) || $I_VAL[_I_SALES_TOTAL] > $O_VAL{$key}{_O__MAXSALES});
            
            if (sprintf("%.2f",$I_VAL[_I_SALES_TOTAL]) eq sprintf("%.2f",$O_VAL{$key}{_O__MAXSALES})) {
                $O_VAL{$key}{_O_PRODUCT_CODE} = $I_VAL[_I_PRODUCT_CODE] if (!defined($O_VAL{$key}{_O_PRODUCT_CODE}));
            }
        }
        
        foreach $key (sort  keys %O_VAL)
        {
            print STDOUT
                $O_VAL{$key}{_O_LOCATION},
                $O_VAL{$key}{_O_PRODUCT_CODE}
            ;
        }
        
        close(DATA);
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        sub PrintHeader
        {
            local $\="\n";
            local $,="|";
            print STDOUT
                'LOCATION',
                'PRODUCT_CODE'
                ;
        }
        
    }
    
}

sub PrintHeader
{
    local $\="\n";
    local $,="|";
    print STDOUT
        'LOCATION',
        'SALES_TOTAL',
        'TOP_PRODUCT'
        ;
}

