#!/usr/bin/perl
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
# vim: syntax=perl ts=4 sw=4
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#Generated By: pequel Version 2.4-3, Build: Tuesday November  1 08:45:13 GMT 2005
#            : http://sourceforge.net/projects/pequel/
#Script Name : filter_regex.pql
#Created On  : Thu Nov  3 09:22:01 2005
#Perl Version: /usr/bin/perl 5.6.1 on solaris
#For         : 
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#Options:
#prefix(examples) directory pathname prefix.
#dumpcode(1) Dump the generated Perl code for pequel script
#script_name(examples/filter_regex.pql) script filename
#header(1) write header record to output.
#optimize(1) optimize generated code.
#doc_title(Filer Regex Example Script) document title.
#doc_email(sample@youraddress.com) document email entry.
#doc_version(2.2) document version for pequel script.
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
use strict;
use constant _I_PRODUCT_CODE          => int    0;
use constant _I_COST_PRICE            => int    1;
use constant _I_DESCRIPTION           => int    2;
use constant _I_SALES_CODE            => int    3;
use constant _I_SALES_PRICE           => int    4;
use constant _I_SALES_QTY             => int    5;
use constant _I_SALES_DATE            => int    6;
use constant _I_LOCATION              => int    7;
use constant _I_LDESCRIPT             => int    8;
use constant _O_SALES_CODE            => int    1;
use constant _O_LOC_DESCRIPT          => int    2;
use constant _O_NUM_PRODUCTS          => int    3;
use constant _O__PRODUCT_CODE         => int    4;
use constant _O_PROD_NUM              => int    5;
use constant _O_LOC_NSW               => int    6;
use constant _O_AVG_COST_PRICE_NSW    => int    7;
use constant _O_LOC_WA                => int    8;
use constant _O_AVG_COST_PRICE_WA     => int    9;
use constant _O_LOC_SA                => int   10;
use constant _O_AVG_COST_PRICE_SA     => int   11;
use constant _T_LOC_DESCRIPT_FLD_1   => int    0;
use constant _T_LOC_DESCRIPT_FLD_2   => int    1;
use constant _T_LOC_DESCRIPT_FLD_3   => int    2;
use constant _I_LOC_DESCRIPT_LOCATION_FLD_KEY => int    9;
use constant _I_LOC_DESCRIPT_LOCATION_FLD_1  => int   10;
use constant _I_LOC_DESCRIPT_LOCATION_FLD_2  => int   11;
use constant _I_LOC_DESCRIPT_LOCATION_FLD_3  => int   12;
local $\="\n";
local $,="|";
print STDERR '[examples/filter_regex.pql ' . localtime() . "] Init";
use constant VERBOSE => int 10000;
use constant LAST_ICELL => int 8;
my @I_VAL;
my @O_VAL;
my %DISTINCT;
my %AVERAGE;
my $key__I_SALES_CODE;
my $previous_key__I_SALES_CODE = undef;
foreach my $f (1..11) { $O_VAL[$f] = undef; }
my $_TABLE_LOC_DESCRIPT = &InitLookupLOC_DESCRIPT; # ref to %$LOC_DESCRIPT hash
# Sort:SALES_CODE(asc:string) 
open(DATA, q{cat  - | sort  -t'|' -y -k 4,4 2>/dev/null |}) || die "Cannot open input: $!";
&PrintHeader();
print STDERR '[examples/filter_regex.pql ' . localtime() . "] Start";
use Benchmark;
my $benchmark_start = new Benchmark;
while (<DATA>)
{
    print STDERR '[examples/filter_regex.pql ' . localtime() . "] $. records." if ($. % VERBOSE == 0);
    chomp;
    @I_VAL = split("[|]", $_);
    next unless ($I_VAL[_I_LOCATION] =~ /^NSW$|^WA$|^SA$/);
    $key__I_SALES_CODE = $I_VAL[_I_SALES_CODE];
    if (!defined($previous_key__I_SALES_CODE))
    {
        $previous_key__I_SALES_CODE = $key__I_SALES_CODE;
    }
    
    elsif ($previous_key__I_SALES_CODE ne $key__I_SALES_CODE)
    {
        $O_VAL[_O_PROD_NUM] = $O_VAL[_O__PRODUCT_CODE] . "-" . $O_VAL[_O_NUM_PRODUCTS];
        $O_VAL[_O_LOC_NSW] = ${$$_TABLE_LOC_DESCRIPT{qq{NSW}}}[_T_LOC_DESCRIPT_FLD_1];
        $O_VAL[_O_AVG_COST_PRICE_NSW] = ($AVERAGE{_O_AVG_COST_PRICE_NSW}{_COUNT} == 0 ? 0 : $AVERAGE{_O_AVG_COST_PRICE_NSW}{_SUM} / $AVERAGE{_O_AVG_COST_PRICE_NSW}{_COUNT});
        $O_VAL[_O_LOC_WA] = ${$$_TABLE_LOC_DESCRIPT{qq{WA}}}[_T_LOC_DESCRIPT_FLD_1];
        $O_VAL[_O_AVG_COST_PRICE_WA] = ($AVERAGE{_O_AVG_COST_PRICE_WA}{_COUNT} == 0 ? 0 : $AVERAGE{_O_AVG_COST_PRICE_WA}{_SUM} / $AVERAGE{_O_AVG_COST_PRICE_WA}{_COUNT});
        $O_VAL[_O_LOC_SA] = ${$$_TABLE_LOC_DESCRIPT{qq{SA}}}[_T_LOC_DESCRIPT_FLD_1];
        $O_VAL[_O_AVG_COST_PRICE_SA] = ($AVERAGE{_O_AVG_COST_PRICE_SA}{_COUNT} == 0 ? 0 : $AVERAGE{_O_AVG_COST_PRICE_SA}{_SUM} / $AVERAGE{_O_AVG_COST_PRICE_SA}{_COUNT});
        print STDOUT
            $O_VAL[_O_SALES_CODE],
            $O_VAL[_O_LOC_DESCRIPT],
            $O_VAL[_O_NUM_PRODUCTS],
            $O_VAL[_O_PROD_NUM],
            $O_VAL[_O_LOC_NSW],
            $O_VAL[_O_AVG_COST_PRICE_NSW],
            $O_VAL[_O_LOC_WA],
            $O_VAL[_O_AVG_COST_PRICE_WA],
            $O_VAL[_O_LOC_SA],
            $O_VAL[_O_AVG_COST_PRICE_SA]
        ;
        $previous_key__I_SALES_CODE = $key__I_SALES_CODE;
        @O_VAL = undef;
        %DISTINCT = undef;
        %AVERAGE = undef;
    }
    
    $O_VAL[_O_SALES_CODE] = $I_VAL[_I_SALES_CODE];
    $I_VAL[_I_LDESCRIPT] = ${$$_TABLE_LOC_DESCRIPT{qq{$I_VAL[_I_LOCATION]}}}[_T_LOC_DESCRIPT_FLD_1] . " in postcode " . ${$$_TABLE_LOC_DESCRIPT{qq{$I_VAL[_I_LOCATION]}}}[_T_LOC_DESCRIPT_FLD_2];
    $O_VAL[_O_LOC_DESCRIPT] = $I_VAL[_I_LDESCRIPT];
    $O_VAL[_O_NUM_PRODUCTS]++ 
        if (defined($I_VAL[_I_PRODUCT_CODE]) && ++$DISTINCT{_O_NUM_PRODUCTS}{qq{$I_VAL[_I_PRODUCT_CODE]}} == 1);
    $O_VAL[_O__PRODUCT_CODE] = $I_VAL[_I_PRODUCT_CODE];
    
    if ($I_VAL[_I_LOCATION] eq 'NSW') {
        $AVERAGE{_O_AVG_COST_PRICE_NSW}{_SUM} += $I_VAL[_I_COST_PRICE];
        $AVERAGE{_O_AVG_COST_PRICE_NSW}{_COUNT}++;
    }
    elsif ($I_VAL[_I_LOCATION] eq 'SA') {
        $AVERAGE{_O_AVG_COST_PRICE_SA}{_SUM} += $I_VAL[_I_COST_PRICE];
        $AVERAGE{_O_AVG_COST_PRICE_SA}{_COUNT}++;
    }
    elsif ($I_VAL[_I_LOCATION] eq 'WA') {
        $AVERAGE{_O_AVG_COST_PRICE_WA}{_SUM} += $I_VAL[_I_COST_PRICE];
        $AVERAGE{_O_AVG_COST_PRICE_WA}{_COUNT}++;
    }
}

$O_VAL[_O_PROD_NUM] = $O_VAL[_O__PRODUCT_CODE] . "-" . $O_VAL[_O_NUM_PRODUCTS];
$O_VAL[_O_LOC_NSW] = ${$$_TABLE_LOC_DESCRIPT{qq{NSW}}}[_T_LOC_DESCRIPT_FLD_1];
$O_VAL[_O_AVG_COST_PRICE_NSW] = ($AVERAGE{_O_AVG_COST_PRICE_NSW}{_COUNT} == 0 ? 0 : $AVERAGE{_O_AVG_COST_PRICE_NSW}{_SUM} / $AVERAGE{_O_AVG_COST_PRICE_NSW}{_COUNT});
$O_VAL[_O_LOC_WA] = ${$$_TABLE_LOC_DESCRIPT{qq{WA}}}[_T_LOC_DESCRIPT_FLD_1];
$O_VAL[_O_AVG_COST_PRICE_WA] = ($AVERAGE{_O_AVG_COST_PRICE_WA}{_COUNT} == 0 ? 0 : $AVERAGE{_O_AVG_COST_PRICE_WA}{_SUM} / $AVERAGE{_O_AVG_COST_PRICE_WA}{_COUNT});
$O_VAL[_O_LOC_SA] = ${$$_TABLE_LOC_DESCRIPT{qq{SA}}}[_T_LOC_DESCRIPT_FLD_1];
$O_VAL[_O_AVG_COST_PRICE_SA] = ($AVERAGE{_O_AVG_COST_PRICE_SA}{_COUNT} == 0 ? 0 : $AVERAGE{_O_AVG_COST_PRICE_SA}{_SUM} / $AVERAGE{_O_AVG_COST_PRICE_SA}{_COUNT});
print STDOUT
    $O_VAL[_O_SALES_CODE],
    $O_VAL[_O_LOC_DESCRIPT],
    $O_VAL[_O_NUM_PRODUCTS],
    $O_VAL[_O_PROD_NUM],
    $O_VAL[_O_LOC_NSW],
    $O_VAL[_O_AVG_COST_PRICE_NSW],
    $O_VAL[_O_LOC_WA],
    $O_VAL[_O_AVG_COST_PRICE_WA],
    $O_VAL[_O_LOC_SA],
    $O_VAL[_O_AVG_COST_PRICE_SA]
;
print STDERR '[examples/filter_regex.pql ' . localtime() . "] $. records.";
my $benchmark_end = new Benchmark;
my $benchmark_timediff = timediff($benchmark_start, $benchmark_end);
print STDERR '[examples/filter_regex.pql ' . localtime() . "] Code statistics: @{[timestr($benchmark_timediff)]}";
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#++++++ Table LOC_DESCRIPT --> Type :ETL::Pequel::Type::Table::Local ++++++
sub InitLookupLOC_DESCRIPT
{
    my %_TABLE_LOC_DESCRIPT;
    %_TABLE_LOC_DESCRIPT =
    (
        'NSW' => ['New South Wales', '2061', '02'],
        'SA' => ['South Australia', '8078', '08'],
        'WA' => ['Western Australia', '5008', '07']
    );
    return \%_TABLE_LOC_DESCRIPT;
}

sub PrintHeader
{
    local $\="\n";
    local $,="|";
    print 
        'SALES_CODE',
        'LOC_DESCRIPT',
        'NUM_PRODUCTS',
        'PROD_NUM',
        'LOC_NSW',
        'AVG_COST_PRICE_NSW',
        'LOC_WA',
        'AVG_COST_PRICE_WA',
        'LOC_SA',
        'AVG_COST_PRICE_SA'
        ;
}

