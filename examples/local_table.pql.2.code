#!/usr/bin/perl
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
# vim: syntax=perl ts=4 sw=4
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#Generated By: pequel Version 2.4-5, Build: Wednesday November 16 21:56:42 GMT 2005
#            : http://sourceforge.net/projects/pequel/
#Script Name : local_table.pql
#Created On  : Wed Nov 16 14:05:30 2005
#Perl Version: /usr/bin/perl 5.6.1 on solaris
#For         : 
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#Options:
#prefix(examples) directory pathname prefix.
#dumpcode(1) Dump the generated Perl code for pequel script
#noverbose(1) do not progress counter
#script_name(examples/local_table.pql) script filename
#header(1) write header record to output.
#optimize(1) optimize generated code.
#doc_title(Local Table Example Script) document title.
#doc_email(sample@youraddress.com) document email entry.
#doc_version(2.2) document version for pequel script.
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
use strict;
use constant _I_PRODUCT_CODE      => int    0;
use constant _I_COST_PRICE        => int    1;
use constant _I_DESCRIPTION       => int    2;
use constant _I_SALES_CODE        => int    3;
use constant _I_SALES_PRICE       => int    4;
use constant _I_SALES_QTY         => int    5;
use constant _I_SALES_DATE        => int    6;
use constant _I_LOCATION          => int    7;
use constant _I_LDESCRIPT         => int    8;
use constant _O_LOCATION          => int    1;
use constant _O_DESCRIPTION       => int    2;
use constant _O_NUM_PRODUCTS      => int    3;
use constant _O_AVG_COST_PRICE    => int    4;
use constant _T_LOC_DESCRIPT_FLD_1   => int    0;
use constant _I_LOC_DESCRIPT_LOCATION_FLD_KEY => int    9;
use constant _I_LOC_DESCRIPT_LOCATION_FLD_1  => int   10;
local $\="\n";
local $,="|";
use constant LAST_ICELL => int 8;
my @I_VAL;
my @O_VAL;
my %DISTINCT;
my %AVERAGE;
my $key__I_LOCATION;
my $previous_key__I_LOCATION = undef;
foreach my $f (1..4) { $O_VAL[$f] = undef; }
my $_TABLE_LOC_DESCRIPT = &InitLookupLOC_DESCRIPT; # ref to %$LOC_DESCRIPT hash
# Sort:LOCATION(asc:string) 
open(DATA, q{cat  - | sort  -t'|' -y -k 8,8 2>/dev/null |}) || die "Cannot open input: $!";
&PrintHeader();
while (<DATA>)
{
    chomp;
    @I_VAL = split("[|]", $_);
    $key__I_LOCATION = $I_VAL[_I_LOCATION];
    if (!defined($previous_key__I_LOCATION))
    {
        $previous_key__I_LOCATION = $key__I_LOCATION;
    }
    
    elsif ($previous_key__I_LOCATION ne $key__I_LOCATION)
    {
        $O_VAL[_O_AVG_COST_PRICE] = ($AVERAGE{_O_AVG_COST_PRICE}{_COUNT} == 0 ? 0 : $AVERAGE{_O_AVG_COST_PRICE}{_SUM} / $AVERAGE{_O_AVG_COST_PRICE}{_COUNT});
        print STDOUT
            $O_VAL[_O_LOCATION],
            $O_VAL[_O_DESCRIPTION],
            $O_VAL[_O_NUM_PRODUCTS],
            $O_VAL[_O_AVG_COST_PRICE]
        ;
        $previous_key__I_LOCATION = $key__I_LOCATION;
        @O_VAL = undef;
        %DISTINCT = undef;
        %AVERAGE = undef;
    }
    
    $O_VAL[_O_LOCATION] = $I_VAL[_I_LOCATION];
    $I_VAL[_I_LDESCRIPT] = $$_TABLE_LOC_DESCRIPT{qq{$I_VAL[_I_LOCATION]}};
    $O_VAL[_O_DESCRIPTION] = $I_VAL[_I_LDESCRIPT];
    $O_VAL[_O_NUM_PRODUCTS]++ 
        if (defined($I_VAL[_I_PRODUCT_CODE]) && ++$DISTINCT{_O_NUM_PRODUCTS}{qq{$I_VAL[_I_PRODUCT_CODE]}} == 1);
    $AVERAGE{_O_AVG_COST_PRICE}{_SUM} += $I_VAL[_I_COST_PRICE];
    $AVERAGE{_O_AVG_COST_PRICE}{_COUNT}++;
}

$O_VAL[_O_AVG_COST_PRICE] = ($AVERAGE{_O_AVG_COST_PRICE}{_COUNT} == 0 ? 0 : $AVERAGE{_O_AVG_COST_PRICE}{_SUM} / $AVERAGE{_O_AVG_COST_PRICE}{_COUNT});
print STDOUT
    $O_VAL[_O_LOCATION],
    $O_VAL[_O_DESCRIPTION],
    $O_VAL[_O_NUM_PRODUCTS],
    $O_VAL[_O_AVG_COST_PRICE]
;
close(DATA);
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#++++++ Table LOC_DESCRIPT --> Type :ETL::Pequel::Type::Table::Local ++++++
sub InitLookupLOC_DESCRIPT
{
    my %_TABLE_LOC_DESCRIPT;
    %_TABLE_LOC_DESCRIPT =
    (
        'ALIC' => 'Alice Springs',
        'MEL' => 'Melbourne',
        'NSW' => 'New South Wales',
        'NT' => 'Northern Territory',
        'PER' => 'Perth',
        'QLD' => 'Queensland',
        'SA' => 'South Australia',
        'SYD' => 'Sydney',
        'VIC' => 'Victoria',
        'WA' => 'Western Australia'
    );
    return \%_TABLE_LOC_DESCRIPT;
}

sub PrintHeader
{
    local $\="\n";
    local $,="|";
    print STDOUT
        'LOCATION',
        'DESCRIPTION',
        'NUM_PRODUCTS',
        'AVG_COST_PRICE'
        ;
}

