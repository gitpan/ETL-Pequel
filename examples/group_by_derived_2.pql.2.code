#!/usr/bin/perl
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
# vim: syntax=perl ts=4 sw=4
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#Generated By: pequel Version 2.4-5, Build: Wednesday November 16 21:56:42 GMT 2005
#            : http://sourceforge.net/projects/pequel/
#Script Name : group_by_derived_2.pql
#Created On  : Wed Nov 16 14:04:48 2005
#Perl Version: /usr/bin/perl 5.6.1 on solaris
#For         : 
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#Options:
#prefix(examples) directory pathname prefix.
#dumpcode(1) Dump the generated Perl code for pequel script
#noverbose(1) do not progress counter
#script_name(examples/group_by_derived_2.pql) script filename
#header(1) write header record to output.
#optimize(1) optimize generated code.
#hash(1) Generate in memory. Input data can be unsorted.
#doc_title(Group By Derived Example Script 2) document title.
#doc_email(sample@youraddress.com) document email entry.
#doc_version(2.2) document version for pequel script.
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
use strict;
use constant _I_PRODUCT_CODE      => int    0;
use constant _I_COST_PRICE        => int    1;
use constant _I_DESCRIPTION       => int    2;
use constant _I_SALES_CODE        => int    3;
use constant _I_SALES_PRICE       => int    4;
use constant _I_SALES_QTY         => int    5;
use constant _I_SALES_DATE        => int    6;
use constant _I_LOCATION          => int    7;
use constant _I_SALES_TOTAL       => int    8;
use constant _I_FIXED_LOC_CODE    => int    9;
use constant _I_STATE_NAME        => int   10;
use constant _O_FIXED_LOC_CODE    => int    1;
use constant _O_STATE_NAME        => int    2;
use constant _O_SALES_TOTAL       => int    3;
use constant _T_TCITY_FLD_1    => int    0;
use constant _T_TCITY_FLD_2    => int    1;
use constant _T_TSTATE_FLD_1   => int    0;
use constant _I_TCITY_LOCATION_FLD_KEY       => int   11;
use constant _I_TCITY_LOCATION_FLD_1         => int   12;
use constant _I_TCITY_LOCATION_FLD_2         => int   13;
use constant _I_TSTATE_FIXED_LOC_CODE_FLD_KEY => int   14;
use constant _I_TSTATE_FIXED_LOC_CODE_FLD_1  => int   15;
local $\="\n";
local $,="|";
use constant LAST_ICELL => int 10;
my @I_VAL;
my %O_VAL;
my $key;
my $_TABLE_TCITY = &InitLookupTCITY; # ref to %$TCITY hash
my $_TABLE_TSTATE = &InitLookupTSTATE; # ref to %$TSTATE hash
&PrintHeader();
while (<STDIN>)
{
    chomp;
    @I_VAL = split("[|]", $_);
    $I_VAL[_I_FIXED_LOC_CODE] = ${$$_TABLE_TCITY{qq{$I_VAL[_I_LOCATION]}}}[_T_TCITY_FLD_2] || $I_VAL[_I_LOCATION];
    $key = ( $I_VAL[_I_FIXED_LOC_CODE] );
    $O_VAL{$key}{_O_FIXED_LOC_CODE} = $I_VAL[_I_FIXED_LOC_CODE];
    $I_VAL[_I_STATE_NAME] = $$_TABLE_TSTATE{qq{$I_VAL[_I_FIXED_LOC_CODE]}};
    $O_VAL{$key}{_O_STATE_NAME} = $I_VAL[_I_STATE_NAME];
    $I_VAL[_I_SALES_TOTAL] = $I_VAL[_I_SALES_QTY] * $I_VAL[_I_SALES_PRICE];
    $O_VAL{$key}{_O_SALES_TOTAL} += $I_VAL[_I_SALES_TOTAL] unless ($I_VAL[_I_SALES_TOTAL] eq '');
}

foreach $key (sort  keys %O_VAL)
{
    print STDOUT
        $O_VAL{$key}{_O_FIXED_LOC_CODE},
        $O_VAL{$key}{_O_STATE_NAME},
        $O_VAL{$key}{_O_SALES_TOTAL}
    ;
}

close(STDIN);
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#++++++ Table TCITY --> Type :ETL::Pequel::Type::Table::Local ++++++
sub InitLookupTCITY
{
    my %_TABLE_TCITY;
    %_TABLE_TCITY =
    (
        'ALIC' => ['Alice Springs', 'NT'],
        'MEL' => ['Melbourne', 'VIC'],
        'PER' => ['Perth', 'WA'],
        'SYD' => ['Sydney', 'NSW']
    );
    return \%_TABLE_TCITY;
}

#++++++ Table TSTATE --> Type :ETL::Pequel::Type::Table::Local ++++++
sub InitLookupTSTATE
{
    my %_TABLE_TSTATE;
    %_TABLE_TSTATE =
    (
        'NSW' => 'New South Wales',
        'NT' => 'Northern Territory',
        'QLD' => 'Queensland',
        'SA' => 'South Australia',
        'VIC' => 'Victoria',
        'WA' => 'Western Australia'
    );
    return \%_TABLE_TSTATE;
}

sub PrintHeader
{
    local $\="\n";
    local $,="|";
    print STDOUT
        'FIXED_LOC_CODE',
        'STATE_NAME',
        'SALES_TOTAL'
        ;
}

