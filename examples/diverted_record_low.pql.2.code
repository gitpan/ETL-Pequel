#!/usr/bin/perl
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
# vim: syntax=perl ts=4 sw=4
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#Generated By: pequel Version 2.4-5, Build: Wednesday November 16 21:56:42 GMT 2005
#            : http://sourceforge.net/projects/pequel/
#Script Name : diverted_record_low.pql
#Created On  : Wed Nov 16 14:02:26 2005
#Perl Version: /usr/bin/perl 5.6.1 on solaris
#For         : 
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#Options:
#prefix(examples) directory pathname prefix.
#dumpcode(1) Dump the generated Perl code for pequel script
#noverbose(1) do not progress counter
#script_name(examples/diverted_record_low.pql) script filename
#optimize(1) optimize generated code.
#doc_title(Diverted Record Example Script) document title.
#doc_email(sample@youraddress.com) document email entry.
#doc_version(2.3) document version for pequel script.
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
use strict;
use constant _I_LOCATION        => int    0;
use constant _I_PRODUCT_CODE    => int    1;
use constant _I_SALES_TOTAL     => int    2;
use constant _I_CATEGORY        => int    3;
use constant _O_CATEGORY        => int    1;
use constant _O_LOCATION        => int    2;
use constant _O_PRODUCT_CODE    => int    3;
use constant _O_SALES_TOTAL     => int    4;
local $\="\n";
local $,="|";
use constant LAST_ICELL => int 3;
my @I_VAL;
my @O_VAL;
my $key__I_LOCATION;
my $previous_key__I_LOCATION = undef;
my $key__I_PRODUCT_CODE;
my $previous_key__I_PRODUCT_CODE = undef;
foreach my $f (1..4) { $O_VAL[$f] = undef; }
# Sort:LOCATION(asc:string) PRODUCT_CODE(asc:string) 
open(DATA, q{cat  - | sort  -t'|' -y -k 1,1 -k 2,2 2>/dev/null |}) || die "Cannot open input: $!";
while (<DATA>)
{
    chomp;
    @I_VAL = split("[|]", $_);
    $key__I_LOCATION = $I_VAL[_I_LOCATION];
    $key__I_PRODUCT_CODE = $I_VAL[_I_PRODUCT_CODE];
    if (!defined($previous_key__I_LOCATION) || !defined($previous_key__I_PRODUCT_CODE))
    {
        $previous_key__I_LOCATION = $key__I_LOCATION;
        $previous_key__I_PRODUCT_CODE = $key__I_PRODUCT_CODE;
    }
    
    elsif ($previous_key__I_LOCATION ne $key__I_LOCATION || $previous_key__I_PRODUCT_CODE ne $key__I_PRODUCT_CODE)
    {
        print STDOUT
            $O_VAL[_O_CATEGORY],
            $O_VAL[_O_LOCATION],
            $O_VAL[_O_PRODUCT_CODE],
            $O_VAL[_O_SALES_TOTAL]
        ;
        $previous_key__I_LOCATION = $key__I_LOCATION;
        $previous_key__I_PRODUCT_CODE = $key__I_PRODUCT_CODE;
        @O_VAL = undef;
    }
    
    $I_VAL[_I_CATEGORY] = 'LOW';
    $O_VAL[_O_CATEGORY] = $I_VAL[_I_CATEGORY];
    $O_VAL[_O_LOCATION] = $I_VAL[_I_LOCATION];
    $O_VAL[_O_PRODUCT_CODE] = $I_VAL[_I_PRODUCT_CODE];
    $O_VAL[_O_SALES_TOTAL] = $I_VAL[_I_SALES_TOTAL];
}

print STDOUT
    $O_VAL[_O_CATEGORY],
    $O_VAL[_O_LOCATION],
    $O_VAL[_O_PRODUCT_CODE],
    $O_VAL[_O_SALES_TOTAL]
;
close(DATA);
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
