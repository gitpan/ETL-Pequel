// vim: syntax=pequel ts=4 sw=4
//:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
//  Script       : external_tables.pql
//:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

options
    header                  // (default) write header record to output.
    optimize                // (default) optimize generated code.
    doc_title("External Tables Example Script")
    doc_email("sample@youraddress.com")
    doc_version(2.2)

description section
	Demonstrates the use of external tables. 
	The default method for loading an external table is to embed the table contents in 
	the generated code. SAMPLE1 is a example of an embedded table. External tables 
	may also be loaded dynamically (at runtime) -- the '_' table name prefix instructs 
	Pequel to load the table dynamically. SAMPLE2 is an axample of a dynamic table.
	The optional environment variable 'PEQUEL_TABLE_PATH' may be set to the path for 
	the location of the table data-source-files. This path will be used to locate the 
	data-source-files unless the data source filename is an absolute path name.

load table
	// External embedded table -- key is field-1 (PRODUCT_CODE). 'STRING' is the key-field
	// type. 'sample.data' is the data-source-file to load the table from. Table has two 
	// columns: DESCRIPTION (field #3 in source file), and LOCATION (#8 in source file). 
	// The default for loading an external table is to embedd the table contents in the generated code.
	SAMPLE1 sample.data 1 STRING DESCRIPTION=3 LOCATION=8

load table
	// External dynamic table. The '_' prefix instructs Pequel
	// to load the table dynamically.
	_SAMPLE2 sample.data 1 STRING DESCRIPTION=3 LOCATION=8

input section
    PRODUCT_CODE,
    COST_PRICE,
    DESCRIPTION,
    SALES_CODE,
	SALES_PRICE,
	SALES_QTY,
	SALES_DATE,
	LOCATION,
	S1_DESCRIPTION => %SAMPLE1(PRODUCT_CODE)->DESCRIPTION
	S1_LOCATION => %SAMPLE1(PRODUCT_CODE)->LOCATION
	S2_DESCRIPTION => %SAMPLE2(PRODUCT_CODE)->DESCRIPTION
	S2_LOCATION => %SAMPLE2(PRODUCT_CODE)->LOCATION

sort by 
	PRODUCT_CODE

group by
	PRODUCT_CODE

output section
	string PRODUCT_CODE			PRODUCT_CODE,
	numeric RECORD_COUNT 		count *
	numeric SALES_QTY_SAMPLE1 	sum SALES_QTY where exists %SAMPLE1(PRODUCT_CODE) 
	numeric SALES_QTY_SAMPLE2 	sum SALES_QTY where exists %SAMPLE2(PRODUCT_CODE) 
	string S1_DESCRIPTION 		S1_DESCRIPTION
	string S1_LOCATION 			S1_LOCATION
	string S2_DESCRIPTION 		S2_DESCRIPTION
	string S2_LOCATION 			S2_LOCATION
