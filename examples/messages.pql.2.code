#!/usr/bin/perl
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
# vim: syntax=perl ts=4 sw=4
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#Generated By: pequel Version 2.4-5, Build: Wednesday November 16 21:56:42 GMT 2005
#            : http://sourceforge.net/projects/pequel/
#Script Name : messages.pql
#Created On  : Wed Nov 16 14:10:20 2005
#Perl Version: /usr/bin/perl 5.6.1 on solaris
#For         : 
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#Options:
#prefix(examples) directory pathname prefix.
#dumpcode(1) Dump the generated Perl code for pequel script
#noverbose(1) do not progress counter
#script_name(examples/messages.pql) script filename
#header(1) write header record to output.
#optimize(1) optimize generated code.
#nulls(1) print zero for null numeric/decimal.
#doc_title(Message Sections Example Script) document title.
#doc_email(sample@youraddress.com) document email entry.
#doc_version(2.3) document version for pequel script.
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
use strict;
use constant _I_product_code     => int    0;
use constant _I_cost_price       => int    1;
use constant _I_description      => int    2;
use constant _I_sales_code       => int    3;
use constant _I_sales_price      => int    4;
use constant _I_sales_qty        => int    5;
use constant _I_sales_date       => int    6;
use constant _I_location         => int    7;
use constant _I_salesman_list    => int    8;
use constant _O_location         => int    1;
use constant _O_num_products     => int    2;
local $\="\n";
local $,="|";
use constant LAST_ICELL => int 8;
my @I_VAL;
my @O_VAL;
my %DISTINCT;
my $key__I_location;
my $previous_key__I_location = undef;
foreach my $f (1..2) { $O_VAL[$f] = undef; }
# Sort:location(asc:string) 
open(DATA, q{cat  - | sort  -t'|' -y -k 8,8 2>/dev/null |}) || die "Cannot open input: $!";
&PrintHeader();
while (<DATA>)
{
    chomp;
    @I_VAL = split("[|]", $_);
    if (( $I_VAL[_I_product_code] =~ /^A111/) || ($I_VAL[_I_product_code] =~ /^X111/ ))
    {
        print STDERR "Product code: $I_VAL[_I_product_code]";
        print STDERR "Process aborted at record " . int($.);
        last;
    }
    
    $key__I_location = $I_VAL[_I_location];
    if (!defined($previous_key__I_location))
    {
        $previous_key__I_location = $key__I_location;
    }
    
    elsif ($previous_key__I_location ne $key__I_location)
    {
        print STDOUT
            $O_VAL[_O_location],
            $O_VAL[_O_num_products]
        ;
        if (( $O_VAL[_O_num_products] < 15 ))
        {
            print STDERR "Location $O_VAL[_O_location] contains less than 15 products: $O_VAL[_O_num_products].";
        }
        
        $previous_key__I_location = $key__I_location;
        @O_VAL = undef;
        %DISTINCT = undef;
    }
    
    $O_VAL[_O_location] = $I_VAL[_I_location];
    $O_VAL[_O_num_products]++ 
        if (defined($I_VAL[_I_product_code]) && ++$DISTINCT{_O_num_products}{qq{$I_VAL[_I_product_code]}} == 1);
}

print STDOUT
    $O_VAL[_O_location],
    $O_VAL[_O_num_products]
;
if (( $O_VAL[_O_num_products] < 15 ))
{
    print STDERR "Location $O_VAL[_O_location] contains less than 15 products: $O_VAL[_O_num_products].";
}

close(DATA);
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
sub PrintHeader
{
    local $\="\n";
    local $,="|";
    print STDOUT
        'location',
        'num_products'
        ;
}

