#!/usr/bin/perl
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
# vim: syntax=perl ts=4 sw=4
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#Generated By: pequel Version 2.4-5, Build: Wednesday November 16 21:56:42 GMT 2005
#            : http://sourceforge.net/projects/pequel/
#Script Name : unpack_input.pql
#Created On  : Wed Nov 16 14:22:33 2005
#Perl Version: /usr/bin/perl 5.6.1 on solaris
#For         : 
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#Options:
#prefix(examples) directory pathname prefix.
#dumpcode(1) Dump the generated Perl code for pequel script
#noverbose(1) do not progress counter
#script_name(examples/unpack_input.pql) script filename
#input_file(sample_fixed.dat) input data filename
#header(1) write header record to output.
#optimize(1) optimize generated code.
#hash(1) Generate in memory. Input data can be unsorted.
#nulls(1) print zero for null numeric/decimal.
#doc_title(Unpack Input Example Script) document title.
#doc_email(sample@youraddress.com) document email entry.
#doc_version(2.3) document version for pequel script.
#discard_header(1) Input file has header record - must be discarded.
#unpack_input(1) Unpack input data stream
#input_pack_fmt([A3/Z*]) Pack format for input data stream
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
use strict;
use constant _I_LOCATION         => int    0;
use constant _I_PRODUCT_CODE     => int    1;
use constant _I_SALES_QTY        => int    2;
use constant _O_LOCATION         => int    1;
use constant _O_PRODUCT_COUNT    => int    2;
use constant _O_MIN_SALES_QTY    => int    3;
use constant _O_MAX_SALES_QTY    => int    4;
local $\="\n";
local $,="|";
use constant LAST_ICELL => int 2;
use constant INPUT_PACK_FMT => 'A3/Z*' x (LAST_ICELL+1);
my @I_VAL;
my %O_VAL;
my $key;
my %DISTINCT;
open(DATA, q{examples/sample_fixed.dat})|| die "Cannot open examples/sample_fixed.dat: $!";
&PrintHeader();
my $discard_header = <DATA>;
while (<DATA>)
{
    chomp;
    @I_VAL = unpack(INPUT_PACK_FMT, $_);
    $key = ( $I_VAL[_I_LOCATION] );
    $O_VAL{$key}{_O_LOCATION} = $I_VAL[_I_LOCATION];
    $O_VAL{$key}{_O_PRODUCT_COUNT}++ 
        if (defined($I_VAL[_I_PRODUCT_CODE]) && ++$DISTINCT{$key}{_O_PRODUCT_COUNT}{qq{$I_VAL[_I_PRODUCT_CODE]}} == 1);
    $O_VAL{$key}{_O_MIN_SALES_QTY} = $I_VAL[_I_SALES_QTY]
        if (!defined($O_VAL{$key}{_O_MIN_SALES_QTY}) || $I_VAL[_I_SALES_QTY] < $O_VAL{$key}{_O_MIN_SALES_QTY});
    $O_VAL{$key}{_O_MAX_SALES_QTY} = $I_VAL[_I_SALES_QTY]
        if (!defined($O_VAL{$key}{_O_MAX_SALES_QTY}) || $I_VAL[_I_SALES_QTY] > $O_VAL{$key}{_O_MAX_SALES_QTY});
}

foreach $key (sort  keys %O_VAL)
{
    print STDOUT
        $O_VAL{$key}{_O_LOCATION},
        $O_VAL{$key}{_O_PRODUCT_COUNT},
        $O_VAL{$key}{_O_MIN_SALES_QTY},
        $O_VAL{$key}{_O_MAX_SALES_QTY}
    ;
}

close(DATA);
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
sub PrintHeader
{
    local $\="\n";
    local $,="|";
    print STDOUT
        'LOCATION',
        'PRODUCT_COUNT',
        'MIN_SALES_QTY',
        'MAX_SALES_QTY'
        ;
}

