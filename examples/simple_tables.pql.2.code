#!/usr/bin/perl
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
# vim: syntax=perl ts=4 sw=4
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#Generated By: pequel Version 2.3-6, Build: Wednesday October  26 23:16:49 BST 2005
#            : http://sourceforge.net/projects/pequel/
#Script Name : examples/simple_tables.pql
#Created On  : Wed Oct 26 14:11:14 2005
#Perl Version: /usr/bin/perl 5.6.1 on solaris
#For         : 
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#Options:
#prefix(examples) directory pathname prefix.
#dumpcode(1) Dump the generated Perl code for pequel script
#noverbose(1) do not progress counter
#script_name(examples/simple_tables.pql) script filename
#header(1) write header record to output.
#optimize(1) optimize generated code.
#discard_header(1) Input file has header record - must be discarded.
#doc_title(Simple Tables Example Script) document title.
#doc_email(sample@youraddress.com) document email entry.
#doc_version(2.2) document version for pequel script.
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
use strict;
use constant _I_PRODUCT_CODE     => int    0;
use constant _I_COST_PRICE       => int    1;
use constant _I_DESCRIPTION      => int    2;
use constant _I_SALES_CODE       => int    3;
use constant _I_SALES_PRICE      => int    4;
use constant _I_SALES_QTY        => int    5;
use constant _I_SALES_DATE       => int    6;
use constant _I_LOCATION         => int    7;
use constant _I_CITY_NAME        => int    8;
use constant _I_STATE_NAME       => int    9;
use constant _I_STATE_NAME_UC    => int   10;
use constant _I_STATE_CODE       => int   11;
use constant _I_STATE_NAME_3     => int   12;
use constant _O_LOCATION         => int    1;
use constant _O_CITY_NAME        => int    2;
use constant _O_STATE_NAME       => int    3;
use constant _O_STATE_NAME_UC    => int    4;
use constant _O_STATE_CODE       => int    5;
use constant _O_STATE_NAME_3     => int    6;
use constant _T_TCITY_FLD_1    => int    0;
use constant _T_TCITY_FLD_2    => int    1;
use constant _T_TSTATE_FLD_1   => int    0;
use constant _I_TCITY_LOCATION_FLD_KEY   => int   13;
use constant _I_TCITY_LOCATION_FLD_1     => int   14;
use constant _I_TCITY_LOCATION_FLD_2     => int   15;
use constant _I_TCITY_1_FLD_KEY          => int   16;
use constant _I_TCITY_1_FLD_1            => int   17;
use constant _I_TCITY_1_FLD_2            => int   18;
use constant _I_TSTATE_1_FLD_KEY         => int   19;
use constant _I_TSTATE_1_FLD_1           => int   20;
use constant _I_TSTATE_LOCATION_FLD_KEY  => int   21;
use constant _I_TSTATE_LOCATION_FLD_1    => int   22;
use constant _I_TSTATE_2_FLD_KEY         => int   23;
use constant _I_TSTATE_2_FLD_1           => int   24;
use constant _I_TSTATE_STATE_CODE_FLD_KEY => int   25;
use constant _I_TSTATE_STATE_CODE_FLD_1  => int   26;
local $\="\n";
local $,="|";
use constant LAST_ICELL => int 12;
my @I_VAL;
my @O_VAL;
foreach my $f (1..6) { $O_VAL[$f] = undef; }
my $_TABLE_TCITY = &InitLookupTCITY; # ref to %$TCITY hash
my $_TABLE_TSTATE = &InitLookupTSTATE; # ref to %$TSTATE hash
&PrintHeader();
my $discard_header = <STDIN>;
while (<STDIN>)
{
    chomp;
    @I_VAL = split("[|]", $_);
    $O_VAL[_O_LOCATION] = $I_VAL[_I_LOCATION];
    $I_VAL[_I_CITY_NAME] = ${$$_TABLE_TCITY{qq{$I_VAL[_I_LOCATION]}}}[_T_TCITY_FLD_1];
    $O_VAL[_O_CITY_NAME] = $I_VAL[_I_CITY_NAME];
    $I_VAL[_I_STATE_NAME] = $$_TABLE_TSTATE{qq{@{[ ${$$_TABLE_TCITY{qq{$I_VAL[_I_LOCATION]}}}[_T_TCITY_FLD_2] ]}}} || $$_TABLE_TSTATE{qq{$I_VAL[_I_LOCATION]}};
    $O_VAL[_O_STATE_NAME] = $I_VAL[_I_STATE_NAME];
    $I_VAL[_I_STATE_NAME_UC] = uc($$_TABLE_TSTATE{qq{@{[ uc(${$$_TABLE_TCITY{qq{@{[ uc($I_VAL[_I_LOCATION]) ]}}}}[_T_TCITY_FLD_2]) ]}}} || $$_TABLE_TSTATE{qq{$I_VAL[_I_LOCATION]}});
    $O_VAL[_O_STATE_NAME_UC] = $I_VAL[_I_STATE_NAME_UC];
    $I_VAL[_I_STATE_CODE] = ${$$_TABLE_TCITY{qq{@{[ uc($I_VAL[_I_LOCATION]) ]}}}}[_T_TCITY_FLD_2] || $I_VAL[_I_LOCATION];
    $O_VAL[_O_STATE_CODE] = $I_VAL[_I_STATE_CODE];
    $I_VAL[_I_STATE_NAME_3] = $$_TABLE_TSTATE{qq{$I_VAL[_I_STATE_CODE]}};
    $O_VAL[_O_STATE_NAME_3] = $I_VAL[_I_STATE_NAME_3];
    print STDOUT
        $O_VAL[_O_LOCATION],
        $O_VAL[_O_CITY_NAME],
        $O_VAL[_O_STATE_NAME],
        $O_VAL[_O_STATE_NAME_UC],
        $O_VAL[_O_STATE_CODE],
        $O_VAL[_O_STATE_NAME_3]
    ;
}

#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#++++++ Table TCITY --> Type :Pequel::Type::Table::Local ++++++
sub InitLookupTCITY
{
    my %_TABLE_TCITY;
    %_TABLE_TCITY =
    (
        'ALIC' => ['Alice Springs', 'NT'],
        'MEL' => ['Melbourne', 'VIC'],
        'PER' => ['Perth', 'WA'],
        'SYD' => ['Sydney', 'NSW']
    );
    return \%_TABLE_TCITY;
}

#++++++ Table TSTATE --> Type :Pequel::Type::Table::Local ++++++
sub InitLookupTSTATE
{
    my %_TABLE_TSTATE;
    %_TABLE_TSTATE =
    (
        'NSW' => 'New South Wales',
        'NT' => 'Northern Territory',
        'QLD' => 'Queensland',
        'SA' => 'South Australia',
        'VIC' => 'Victoria',
        'WA' => 'Western Australia'
    );
    return \%_TABLE_TSTATE;
}

sub PrintHeader
{
    local $\="\n";
    local $,="|";
    print 
        'LOCATION',
        'CITY_NAME',
        'STATE_NAME',
        'STATE_NAME_UC',
        'STATE_CODE',
        'STATE_NAME_3'
        ;
}

