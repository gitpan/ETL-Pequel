// vim: syntax=pequel ts=4 sw=4
//:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
//  Script       : output_calc_fields.pql
//:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

options
    header                  // (default) write header record to output.
    optimize                // (default) optimize generated code.
    doc_title("Output Calculated Fields Example Script")
    doc_email("sample@youraddress.com")
    doc_version(2.2)

description section
	Demonstrate use of calculated output fields.

input section
    PRODUCT_CODE,
    COST_PRICE,
    DESCRIPTION,
    SALES_CODE,
	SALES_PRICE,
	SALES_QTY,
	SALES_DATE,
	LOCATION

sort by
	PRODUCT_CODE

group by
	PRODUCT_CODE

output section
	string PRODUCT_CODE 			PRODUCT_CODE
	numeric MIN_COST_PRICE			min COST_PRICE
	numeric MAX_COST_PRICE			max COST_PRICE
	numeric _DISTINCT_SALES_CODE	distinct SALES_CODE
	string SALES_CODE_1				first SALES_CODE where _DISTINCT_SALES_CODE == 1
	string SALES_CODE_2				first SALES_CODE where _DISTINCT_SALES_CODE == 2
	string SALES_CODE_3				first SALES_CODE where _DISTINCT_SALES_CODE == 3
	string SALES_CODE_4				first SALES_CODE where _DISTINCT_SALES_CODE == 4
	string SALES_CODE_5				first SALES_CODE where _DISTINCT_SALES_CODE == 5
	string COMMENT					= _DISTINCT_SALES_CODE > 5 \
										? "Product has more than five sales codes" \
										: "Product has " . _DISTINCT_SALES_CODE . " sales codes"
	string COMMENT2					= "Product has " . (_DISTINCT_SALES_CODE > 5 \
										? "more than five" : _DISTINCT_SALES_CODE) . " sales codes"
