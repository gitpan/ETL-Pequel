// vim: syntax=pequel ts=4 sw=4
//:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
//  Script       : filter_regex.pql
//:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

options
    header                  // (default) write header record to output.
    optimize                // (default) optimize generated code.
    doc_title("Filer Regex Example Script")
    doc_email("sample@youraddress.com")
    doc_version(2.2)

description section
	Demonstrates use of filter and Perl regular expressions. The reqular expression can 
	contain Pequel field names, macros and table names.
	This example also demonstrates the use of a simple 'local' table (LOC_DESCRIPT).

init table
//  Table-Name  	Key-Value    Field->1				Field-2		Field-3
	LOC_DESCRIPT	NSW 		'New South Wales' 		'2061' 		'02'
	LOC_DESCRIPT	WA 			'Western Australia' 	'5008' 		'07'
	LOC_DESCRIPT	SA 			'South Australia' 		'8078' 		'08'

filter
// Filter out all records except where LOCATION is 'NSW' or 'WA' or 'SA'
	LOCATION =~ /^NSW$|^WA$|^SA$/

input section
    PRODUCT_CODE,
    COST_PRICE,
    DESCRIPTION,
    SALES_CODE,
	SALES_PRICE,
	SALES_QTY,
	SALES_DATE,
	LOCATION,
	LDESCRIPT => %LOC_DESCRIPT(LOCATION)->1 . " in postcode " . %LOC_DESCRIPT(LOCATION)->2

sort by
	SALES_CODE

group by
	SALES_CODE

output section
	string SALES_CODE				SALES_CODE
	string LOC_DESCRIPT				LDESCRIPT
	numeric NUM_PRODUCTS			distinct PRODUCT_CODE 
	string _PRODUCT_CODE			PRODUCT_CODE
	string PROD_NUM					= _PRODUCT_CODE . "-" . NUM_PRODUCTS
	string LOC_NSW					= %LOC_DESCRIPT(NSW)->1
	numeric AVG_COST_PRICE_NSW		avg COST_PRICE where LOCATION eq 'NSW'
	string LOC_WA					= %LOC_DESCRIPT(WA)->1
	numeric AVG_COST_PRICE_WA		avg COST_PRICE where LOCATION eq 'WA'
	string LOC_SA					= %LOC_DESCRIPT(SA)->1
	numeric AVG_COST_PRICE_SA		avg COST_PRICE where LOCATION eq 'SA'
