#!/usr/bin/perl
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
# vim: syntax=perl ts=4 sw=4
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#Generated By: pequel Version 2.4-5, Build: Wednesday November 16 21:56:42 GMT 2005
#            : http://sourceforge.net/projects/pequel/
#Script Name : array_fields.pql
#Created On  : Wed Nov 16 13:51:10 2005
#Perl Version: /usr/bin/perl 5.6.1 on solaris
#For         : 
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#Options:
#prefix(examples) directory pathname prefix.
#dumpcode(1) Dump the generated Perl code for pequel script
#noverbose(1) do not progress counter
#script_name(examples/array_fields.pql) script filename
#header(1) write header record to output.
#hash(1) Generate in memory. Input data can be unsorted.
#optimize(1) optimize generated code.
#nonulls(1) do not print zero for null numeric/decimal.
#doc_title(Array Fields Example Script) document title.
#doc_email(sample@youraddress.com) document email entry.
#doc_version(2.2) document version for pequel script.
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
use strict;
use constant _I_product_code         => int    0;
use constant _I_cost_price           => int    1;
use constant _I_description          => int    2;
use constant _I_sales_code           => int    3;
use constant _I_sales_price          => int    4;
use constant _I_sales_qty            => int    5;
use constant _I_sales_date           => int    6;
use constant _I_location             => int    7;
use constant _I_salesman_list        => int    8;
use constant _I_num_salesmen         => int    9;
use constant _I_salesmen_sorted      => int   10;
use constant _I_salesmen_sorted_2    => int   11;
use constant _I_salesmen_uniq        => int   12;
use constant _I_salesmen_uniq_2      => int   13;
use constant _I_salesmen_reverse     => int   14;
use constant _O_location             => int    1;
use constant _O_product_code         => int    2;
use constant _O_salesman_list        => int    3;
use constant _O_num_salesmen         => int    4;
use constant _O_salesmen_sorted      => int    5;
use constant _O_salesmen_sorted_2    => int    6;
use constant _O_salesmen_uniq        => int    7;
use constant _O_salesmen_uniq_2      => int    8;
use constant _O_salesmen_reverse     => int    9;
local $\="\n";
local $,="|";
use constant LAST_ICELL => int 14;
my @I_VAL;
my %O_VAL;
my $key;
my @numeric_fields = (4);
&PrintHeader();
while (<STDIN>)
{
    chomp;
    @I_VAL = split("[|]", $_);
    $O_VAL{$key}{_O_location} = $I_VAL[_I_location];
    $O_VAL{$key}{_O_product_code} = $I_VAL[_I_product_code];
    $O_VAL{$key}{_O_salesman_list} = $I_VAL[_I_salesman_list];
    $I_VAL[_I_num_salesmen] = int(split(/\s*,\s*/,$I_VAL[_I_salesman_list],-1));
    $O_VAL{$key}{_O_num_salesmen} = $I_VAL[_I_num_salesmen];
    $I_VAL[_I_salesmen_sorted] = join(',', sort(split(/\s*,\s*/,$I_VAL[_I_salesman_list],-1)));
    $O_VAL{$key}{_O_salesmen_sorted} = $I_VAL[_I_salesmen_sorted];
    $I_VAL[_I_salesmen_sorted_2] = join(',', sort(split(/\s*,\s*/,$I_VAL[_I_salesman_list],-1)));
    $O_VAL{$key}{_O_salesmen_sorted_2} = $I_VAL[_I_salesmen_sorted_2];
    $I_VAL[_I_salesmen_uniq] = &{sub { my %uniq; foreach (split(/\s*,\s*/,$I_VAL[_I_salesman_list],-1)) { $uniq{$_}++; } return join(',', keys %uniq); }};
    $O_VAL{$key}{_O_salesmen_uniq} = $I_VAL[_I_salesmen_uniq];
    $I_VAL[_I_salesmen_uniq_2] = &{sub { my %uniq; foreach (split(/\s*,\s*/,$I_VAL[_I_salesman_list],-1)) { $uniq{$_}++; } return join(',', keys %uniq); }};
    $O_VAL{$key}{_O_salesmen_uniq_2} = $I_VAL[_I_salesmen_uniq_2];
    $I_VAL[_I_salesmen_reverse] = join(',', reverse(split(/\s*,\s*/,join(',', sort(split(/\s*,\s*/,$I_VAL[_I_salesman_list],-1))),-1)));
    $O_VAL{$key}{_O_salesmen_reverse} = $I_VAL[_I_salesmen_reverse];
    $I_VAL[_I_num_salesmen] = 0 if ($I_VAL[_I_num_salesmen] == 0);
    foreach my $f (@numeric_fields)
    {
        $O_VAL{$key}{$f} = 0
            if ($O_VAL{$key}{$f} == 0);
    }
    
    print STDOUT
        $O_VAL{$key}{_O_location},
        $O_VAL{$key}{_O_product_code},
        $O_VAL{$key}{_O_salesman_list},
        $O_VAL{$key}{_O_num_salesmen},
        $O_VAL{$key}{_O_salesmen_sorted},
        $O_VAL{$key}{_O_salesmen_sorted_2},
        $O_VAL{$key}{_O_salesmen_uniq},
        $O_VAL{$key}{_O_salesmen_uniq_2},
        $O_VAL{$key}{_O_salesmen_reverse}
    ;
}

foreach $key (sort  keys %O_VAL)
{
}

close(STDIN);
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
sub PrintHeader
{
    local $\="\n";
    local $,="|";
    print STDOUT
        'location',
        'product_code',
        'salesman_list',
        'num_salesmen',
        'salesmen_sorted',
        'salesmen_sorted_2',
        'salesmen_uniq',
        'salesmen_uniq_2',
        'salesmen_reverse'
        ;
}

