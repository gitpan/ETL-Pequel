// vim: syntax=pequel ts=4 sw=4
//:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
//  Script       : oracle_table.pql
//:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

options
    header                  // (default) write header record to output.
    optimize                // (default) optimize generated code.
    doc_title("Oracle Tables Example Script")
    doc_email("sample@youraddress.com")
    doc_version(2.2)
	inline_CC(CC)				// C compiler.
//	inline_clean_after_build(0) // Pass-through Inline options:
//	inline_clean_build_area(0)
//	inline_print_info(1)
//	inline_build_noisy(1)
//	inline_build_timers(0)
	inline_force_build(1)
//	inline_directory()
	inline_optimize("-xO5 -xinline=%auto")	// Solaris 64 bit
	inline_ccflags("-xchip=ultra3 -DSS_64BIT_SERVER -DBIT64 -DMACHINE64")

description section
	Demonstrates the use of external Oracle tables. WARNING: this feature is alpha and would
	(probably) require some hand coding adjustments to the generated code.

	Requires Inline::C and DBI to be installed. 
	
	The 'load table oracle' section will load the ASCII data contained in the file specified by 
	the second parameter ('sample.data' inexample SAMPLE1 below) into an oracle table. The 
	generated inline C code will access this table via Oracle OCI. The Oracle table will be 
	re-created with the same name as specified by the first parameter('SAMPLE1' in this example). 
	The data will be loaded via Oracle sqlldr. The 4th parameter KeyLoc specifies the location 
	of the key field in sample.data (field numbers starting from 1). The next parameter KeyType
	specifies the Oracle type and size to use when creating the table. The Columns list specifies
	field and field-number (in the SourceData file) pairs. The 'merge' option can be used when the 
	table is sorted by the same key as specified in the 'sort by' section. This will result in a
	substantial performance gain when looking up values in the table.

load table oracle
//	Declare SAMPLE1 table -- all parameters must appear on one line or use line continuation char '\'
//  TableName	SourceData	ConnectString				KeyLoc	KeyType		Columns
	SAMPLE1 	sample.data 'user/passwd@DB1' 	    	1 		STRING(12) 	DESCRIPTION=3 \
																			LOCATION=8

load table oracle merge
//  TableName	SourceData	ConnectString				KeyLoc	KeyType		Columns
	SAMPLE2 	sample.data 'user/passwd@DB1' 			1 		STRING(12) 	DESCRIPTION=3 LOCATION=8

input section
    PRODUCT_CODE,
    COST_PRICE,
    DESCRIPTION,
    SALES_CODE,
	SALES_PRICE,
	SALES_QTY,
	SALES_DATE,
	LOCATION,
	S1_DESCRIPTION => %SAMPLE1(PRODUCT_CODE)->DESCRIPTION
	S1_LOCATION => %SAMPLE1(PRODUCT_CODE)->LOCATION
	S2_DESCRIPTION => %SAMPLE2(PRODUCT_CODE)->DESCRIPTION
	S2_LOCATION => %SAMPLE2(PRODUCT_CODE)->LOCATION

sort by 
	PRODUCT_CODE

group by
	PRODUCT_CODE

output section
	string PRODUCT_CODE			PRODUCT_CODE,
	numeric RECORD_COUNT 		count *
	numeric SALES_QTY_SAMPLE1 	sum SALES_QTY where exists %SAMPLE1(PRODUCT_CODE) 
	string S1_DESCRIPTION 		S1_DESCRIPTION
	string S1_LOCATION 			S1_LOCATION
	numeric SALES_QTY_SAMPLE2 	sum SALES_QTY where exists %SAMPLE2(PRODUCT_CODE) 
	string S2_DESCRIPTION 		S2_DESCRIPTION
	string S2_LOCATION 			S2_LOCATION
