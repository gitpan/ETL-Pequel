// vim: syntax=pequel ts=4 sw=4
//:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
//  Script       : simple_tables.pql
//:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

options
    header                  // (default) write header record to output.
    optimize                // (default) optimize generated code.
	discard_header
    doc_title("Simple Tables Example Script")
    doc_email("sample@youraddress.com")
    doc_version(2.2)

description section
	Demonstrates the use of tables.

init table // multi-column local table
//  Table-Name  Key-Value    Field->1         Field->2
	TCITY       'SYD'        'Sydney'         'NSW'
	TCITY       'MEL'        'Melbourne'      'VIC'
	TCITY       'PER'        'Perth'          'WA'
	TCITY       'ALIC'       'Alice Springs'  'NT'

init table // single-column local table
//  Table-Name  Key-Value    Field->1
	TSTATE      'WA'         "Western Australia" 
	TSTATE      'NSW'        "New South Wales" 
	TSTATE      'SA'         'South Australia' 
	TSTATE      'QLD'        'Queensland'  
	TSTATE      'NT'         'Northern Territory' 
	TSTATE      'VIC'        'Victoria' 

input section
    PRODUCT_CODE,
    COST_PRICE,
    DESCRIPTION,
    SALES_CODE,
	SALES_PRICE,
	SALES_QTY,
	SALES_DATE,
	LOCATION,
	CITY_NAME => %TCITY(LOCATION)->1,
	STATE_NAME => %TSTATE(%TCITY(LOCATION)->2)->1 || %TSTATE(LOCATION)->1, // nested table
	STATE_NAME_UC => &uc(%TSTATE(&uc(%TCITY(&uc(LOCATION))->2))->1 || %TSTATE(LOCATION)->1), // macros
	STATE_CODE => %TCITY(&uc(LOCATION))->2 || LOCATION, // macros
	STATE_NAME_3 => %TSTATE(STATE_CODE)->1 // derived key field

output section
	string LOCATION			LOCATION
	string CITY_NAME 		CITY_NAME
	string STATE_NAME 		STATE_NAME
	string STATE_NAME_UC 	STATE_NAME_UC
	string STATE_CODE 		STATE_CODE
	string STATE_NAME_3 	STATE_NAME_3
