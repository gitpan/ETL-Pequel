#!/usr/bin/perl
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
# vim: syntax=perl ts=4 sw=4
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#Generated By: pequel Version 2.4-5, Build: Wednesday November 16 21:56:42 GMT 2005
#            : http://sourceforge.net/projects/pequel/
#Script Name : macro_counters.pql
#Created On  : Wed Nov 16 14:06:08 2005
#Perl Version: /usr/bin/perl 5.6.1 on solaris
#For         : 
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#Options:
#prefix(examples) directory pathname prefix.
#dumpcode(1) Dump the generated Perl code for pequel script
#noverbose(1) do not progress counter
#script_name(examples/macro_counters.pql) script filename
#header(1) write header record to output.
#optimize(1) optimize generated code.
#nulls(1) print zero for null numeric/decimal.
#doc_title(Counter Macros Example Script) document title.
#doc_email(sample@youraddress.com) document email entry.
#doc_version(2.3) document version for pequel script.
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
use strict;
use constant _I_product_code     => int    0;
use constant _I_cost_price       => int    1;
use constant _I_description      => int    2;
use constant _I_sales_code       => int    3;
use constant _I_sales_price      => int    4;
use constant _I_sales_qty        => int    5;
use constant _I_sales_date       => int    6;
use constant _I_location         => int    7;
use constant _I_salesman_list    => int    8;
use constant _I_record_number    => int    9;
use constant _O_record_number    => int    1;
use constant _O_location         => int    2;
use constant _O_product_code     => int    3;
use constant _O_sales_qty        => int    4;
local $\="\n";
local $,="|";
use constant LAST_ICELL => int 9;
my @I_VAL;
my @O_VAL;
foreach my $f (1..4) { $O_VAL[$f] = undef; }
&PrintHeader();
while (<STDIN>)
{
    chomp;
    @I_VAL = split("[|]", $_);
    $I_VAL[_I_record_number] = int($.);
    $O_VAL[_O_record_number] = $I_VAL[_I_record_number];
    $O_VAL[_O_location] = $I_VAL[_I_location];
    $O_VAL[_O_product_code] = $I_VAL[_I_product_code];
    $O_VAL[_O_sales_qty] = $I_VAL[_I_sales_qty];
    print STDOUT
        $O_VAL[_O_record_number],
        $O_VAL[_O_location],
        $O_VAL[_O_product_code],
        $O_VAL[_O_sales_qty]
    ;
}

close(STDIN);
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
sub PrintHeader
{
    local $\="\n";
    local $,="|";
    print STDOUT
        'record_number',
        'location',
        'product_code',
        'sales_qty'
        ;
}

