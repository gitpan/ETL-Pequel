#!/usr/bin/perl
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
# vim: syntax=perl ts=4 sw=4
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#Generated By: pequel Version 2.4-5, Build: Wednesday November 16 21:56:42 GMT 2005
#            : http://sourceforge.net/projects/pequel/
#Script Name : pack_output.pql
#Created On  : Wed Nov 16 14:17:11 2005
#Perl Version: /usr/bin/perl 5.6.1 on solaris
#For         : 
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#Options:
#prefix(examples) directory pathname prefix.
#dumpcode(1) Dump the generated Perl code for pequel script
#noverbose(1) do not progress counter
#script_name(examples/pack_output.pql) script filename
#header(1) write header record to output.
#optimize(1) optimize generated code.
#hash(1) Generate in memory. Input data can be unsorted.
#nulls(1) print zero for null numeric/decimal.
#doc_title(Pack Output Example Script) document title.
#doc_email(sample@youraddress.com) document email entry.
#doc_version(2.3) document version for pequel script.
#discard_header(1) Input file has header record - must be discarded.
#pack_output(1) Pack output data stream
#output_pack_fmt([A3/Z*]) Pack format for output data stream
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
use strict;
use constant _I_PRODUCT_CODE    => int    0;
use constant _I_COST_PRICE      => int    1;
use constant _I_DESCRIPTION     => int    2;
use constant _I_SALES_CODE      => int    3;
use constant _I_SALES_PRICE     => int    4;
use constant _I_SALES_QTY       => int    5;
use constant _I_SALES_DATE      => int    6;
use constant _I_LOCATION        => int    7;
use constant _O_LOCATION        => int    1;
use constant _O_PRODUCT_CODE    => int    2;
use constant _O_SALES_QTY       => int    3;
local $\="\n";
local $,="";
use constant LAST_ICELL => int 7;
use constant OUTPUT_PACK_FMT => 'A3/Z*' x (3);
my @I_VAL;
my %O_VAL;
my $key;
&PrintHeader();
my $discard_header = <STDIN>;
while (<STDIN>)
{
    chomp;
    @I_VAL = split("[|]", $_);
    $O_VAL{$key}{_O_LOCATION} = $I_VAL[_I_LOCATION];
    $O_VAL{$key}{_O_PRODUCT_CODE} = $I_VAL[_I_PRODUCT_CODE];
    $O_VAL{$key}{_O_SALES_QTY} = $I_VAL[_I_SALES_QTY];
    print STDOUT
        pack(OUTPUT_PACK_FMT, 
            $O_VAL{$key}{_O_LOCATION},
            $O_VAL{$key}{_O_PRODUCT_CODE},
            $O_VAL{$key}{_O_SALES_QTY}
        )
    ;
}

foreach $key (sort  keys %O_VAL)
{
}

close(STDIN);
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
sub PrintHeader
{
    local $\="\n";
    local $,="|";
    print STDOUT
        'LOCATION',
        'PRODUCT_CODE',
        'SALES_QTY'
        ;
}

