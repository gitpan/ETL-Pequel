#!/usr/bin/perl
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
# vim: syntax=perl ts=4 sw=4
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#Generated By: pequel Version 2.4-5, Build: Wednesday November 16 21:56:42 GMT 2005
#            : http://sourceforge.net/projects/pequel/
#Script Name : external_tables.pql
#Created On  : Wed Nov 16 14:03:15 2005
#Perl Version: /usr/bin/perl 5.6.1 on solaris
#For         : 
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#Options:
#prefix(examples) directory pathname prefix.
#dumpcode(1) Dump the generated Perl code for pequel script
#noverbose(1) do not progress counter
#script_name(examples/external_tables.pql) script filename
#header(1) write header record to output.
#optimize(1) optimize generated code.
#doc_title(External Tables Example Script) document title.
#doc_email(sample@youraddress.com) document email entry.
#doc_version(2.2) document version for pequel script.
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
use strict;
use constant _I_PRODUCT_CODE         => int    0;
use constant _I_COST_PRICE           => int    1;
use constant _I_DESCRIPTION          => int    2;
use constant _I_SALES_CODE           => int    3;
use constant _I_SALES_PRICE          => int    4;
use constant _I_SALES_QTY            => int    5;
use constant _I_SALES_DATE           => int    6;
use constant _I_LOCATION             => int    7;
use constant _I_S1_DESCRIPTION       => int    8;
use constant _I_S1_LOCATION          => int    9;
use constant _I_S2_DESCRIPTION       => int   10;
use constant _I_S2_LOCATION          => int   11;
use constant _O_PRODUCT_CODE         => int    1;
use constant _O_RECORD_COUNT         => int    2;
use constant _O_SALES_QTY_SAMPLE1    => int    3;
use constant _O_SALES_QTY_SAMPLE2    => int    4;
use constant _O_S1_DESCRIPTION       => int    5;
use constant _O_S1_LOCATION          => int    6;
use constant _O_S2_DESCRIPTION       => int    7;
use constant _O_S2_LOCATION          => int    8;
use constant _T_SAMPLE1_FLD_DESCRIPTION   => int    0;
use constant _T_SAMPLE1_FLD_LOCATION      => int    1;
use constant _T_SAMPLE2_FLD_DESCRIPTION   => int    0;
use constant _T_SAMPLE2_FLD_LOCATION      => int    1;
use constant _I_SAMPLE1_PRODUCT_CODE_FLD_KEY          => int   12;
use constant _I_SAMPLE1_PRODUCT_CODE_FLD_DESCRIPTION  => int   13;
use constant _I_SAMPLE1_PRODUCT_CODE_FLD_LOCATION     => int   14;
use constant _I_SAMPLE2_PRODUCT_CODE_FLD_KEY          => int   15;
use constant _I_SAMPLE2_PRODUCT_CODE_FLD_DESCRIPTION  => int   16;
use constant _I_SAMPLE2_PRODUCT_CODE_FLD_LOCATION     => int   17;
local $\="\n";
local $,="|";
use constant LAST_ICELL => int 11;
my @I_VAL;
my @O_VAL;
my $key__I_PRODUCT_CODE;
my $previous_key__I_PRODUCT_CODE = undef;
foreach my $f (1..8) { $O_VAL[$f] = undef; }
my $_TABLE_SAMPLE1 = &InitLookupSAMPLE1; # ref to %$SAMPLE1 hash
my $_TABLE_SAMPLE2 = &LoadTableSAMPLE2; # ref to %$SAMPLE2 hash
# Sort:PRODUCT_CODE(asc:string) 
open(DATA, q{cat  - | sort  -t'|' -y -k 1,1 2>/dev/null |}) || die "Cannot open input: $!";
&PrintHeader();
while (<DATA>)
{
    chomp;
    @I_VAL = split("[|]", $_);
    $key__I_PRODUCT_CODE = $I_VAL[_I_PRODUCT_CODE];
    if (!defined($previous_key__I_PRODUCT_CODE))
    {
        $previous_key__I_PRODUCT_CODE = $key__I_PRODUCT_CODE;
    }
    
    elsif ($previous_key__I_PRODUCT_CODE ne $key__I_PRODUCT_CODE)
    {
        print STDOUT
            $O_VAL[_O_PRODUCT_CODE],
            $O_VAL[_O_RECORD_COUNT],
            $O_VAL[_O_SALES_QTY_SAMPLE1],
            $O_VAL[_O_SALES_QTY_SAMPLE2],
            $O_VAL[_O_S1_DESCRIPTION],
            $O_VAL[_O_S1_LOCATION],
            $O_VAL[_O_S2_DESCRIPTION],
            $O_VAL[_O_S2_LOCATION]
        ;
        $previous_key__I_PRODUCT_CODE = $key__I_PRODUCT_CODE;
        @O_VAL = undef;
    }
    
    $O_VAL[_O_PRODUCT_CODE] = $I_VAL[_I_PRODUCT_CODE];
    $O_VAL[_O_RECORD_COUNT]++;
    $I_VAL[_I_S1_DESCRIPTION] = ${$$_TABLE_SAMPLE1{qq{$I_VAL[_I_PRODUCT_CODE]}}}[_T_SAMPLE1_FLD_DESCRIPTION];
    $O_VAL[_O_S1_DESCRIPTION] = $I_VAL[_I_S1_DESCRIPTION];
    $I_VAL[_I_S1_LOCATION] = ${$$_TABLE_SAMPLE1{qq{$I_VAL[_I_PRODUCT_CODE]}}}[_T_SAMPLE1_FLD_LOCATION];
    $O_VAL[_O_S1_LOCATION] = $I_VAL[_I_S1_LOCATION];
    $I_VAL[_I_S2_DESCRIPTION] = ${$$_TABLE_SAMPLE2{qq{$I_VAL[_I_PRODUCT_CODE]}}}[_T_SAMPLE2_FLD_DESCRIPTION];
    $O_VAL[_O_S2_DESCRIPTION] = $I_VAL[_I_S2_DESCRIPTION];
    $I_VAL[_I_S2_LOCATION] = ${$$_TABLE_SAMPLE2{qq{$I_VAL[_I_PRODUCT_CODE]}}}[_T_SAMPLE2_FLD_LOCATION];
    $O_VAL[_O_S2_LOCATION] = $I_VAL[_I_S2_LOCATION];
    
    if (exists $$_TABLE_SAMPLE1{qq{$I_VAL[_I_PRODUCT_CODE]}}) {
        $O_VAL[_O_SALES_QTY_SAMPLE1] += $I_VAL[_I_SALES_QTY] unless ($I_VAL[_I_SALES_QTY] eq '');
    }
    
    if (exists $$_TABLE_SAMPLE2{qq{$I_VAL[_I_PRODUCT_CODE]}}) {
        $O_VAL[_O_SALES_QTY_SAMPLE2] += $I_VAL[_I_SALES_QTY] unless ($I_VAL[_I_SALES_QTY] eq '');
    }
}

print STDOUT
    $O_VAL[_O_PRODUCT_CODE],
    $O_VAL[_O_RECORD_COUNT],
    $O_VAL[_O_SALES_QTY_SAMPLE1],
    $O_VAL[_O_SALES_QTY_SAMPLE2],
    $O_VAL[_O_S1_DESCRIPTION],
    $O_VAL[_O_S1_LOCATION],
    $O_VAL[_O_S2_DESCRIPTION],
    $O_VAL[_O_S2_LOCATION]
;
close(DATA);
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#++++++ Table SAMPLE1 --> Type :ETL::Pequel::Type::Table::Local ++++++
sub InitLookupSAMPLE1
{
    my %_TABLE_SAMPLE1;
    %_TABLE_SAMPLE1 =
    (
        'A100AIX09' => ['Compaq 9000 GR P4-1700/256/40GB', 'WA'],
        'A106UIH04' => ['Toshiba 4000 GR P4-1700/256/40GB', 'ALIC'],
        'A109AYU10' => ['IBM 10000 FR P4-1700/512/10GB', 'MEL'],
        'A109IWD09' => ['Compaq 9000 IT P4-1700/128/20GB', 'QLD'],
        'A112HHM10' => ['Cannon 10000 FR P3-880/256/30GB', 'SYD'],
        'B111KYK01' => ['Dell 1000 FR P4-1700/128/40GB', 'PER'],
        'B117DAR07' => ['Cannon 7000 SP P4-1800/128/40GB', 'ALIC'],
        'C103WEO02' => ['Cannon 2000 FR P4-1600/128/60GB', 'WA'],
        'C114ERT05' => ['IBM 5000 IT P4-1800/1GB/30GB', 'VIC'],
        'C119GHQ10' => ['Dell 10000 FR P4-1700/1GB/30GB', 'SYD'],
        'C119HJM01' => ['Philips 1000 IT P3-1400/512/40GB', 'NSW'],
        'D105BWE02' => ['IBM 2000 IT P4-1700/1GB/60GB', 'PER'],
        'D113QFU10' => ['Compaq 10000 SP P4-1900/1GB/30GB', 'WA'],
        'D117WMU02' => ['HP 2000 GR P4-1800/1GB/20GB', 'QLD'],
        'E100JMA04' => ['Cannon 4000 FR P3-1200/512/10GB', 'VIC'],
        'E100QTG07' => ['Fujitsu 7000 SP P4-1700/512/10GB', 'NT'],
        'E104HDH01' => ['Compaq 1000 EN P3-1200/256/20GB', 'QLD'],
        'E108UFJ05' => ['Compaq 5000 SP P3-880/128/30GB', 'VIC'],
        'E112SJD07' => ['IBM 7000 GR P3-1200/1GB/20GB', 'SYD'],
        'E119HQG01' => ['Dell 1000 GR P4-2000/1GB/40GB', 'NT'],
        'F102EUR03' => ['Cannon 3000 EN P4-2000/512/30GB', 'MEL'],
        'F104ICW08' => ['Compaq 8000 SP P4-1700/128/60GB', 'PER'],
        'F105RTJ10' => ['Dell 10000 FR P3-900/512/20GB', 'WA'],
        'F117WIP08' => ['IBM 8000 IT P3-900/1GB/10GB', 'MEL'],
        'G103TKH08' => ['Fujitsu 8000 SP P4-1700/128/60GB', 'ALIC'],
        'G106VOK04' => ['Fujitsu 4000 SP P3-900/512/40GB', 'NT'],
        'G111FOI06' => ['Toshiba 6000 FR P4-1900/512/60GB', 'NT'],
        'G113WVH04' => ['Compaq 4000 SP P4-1800/256/20GB', 'NT'],
        'H106LAF10' => ['Dell 10000 GR P4-2000/1GB/40GB', 'SA'],
        'H107VAE06' => ['Toshiba 6000 FR P3-880/512/20GB', 'WA'],
        'H113KDM07' => ['Compaq 7000 EN P3-880/512/40GB', 'NT'],
        'I105RHR09' => ['IBM 9000 FR P3-1200/512/40GB', 'NT'],
        'I108THJ06' => ['Dell 6000 GR P3-880/128/40GB', 'VIC'],
        'I109JTE07' => ['IBM 7000 GR P3-1200/512/40GB', 'MEL'],
        'I111AGN09' => ['Toshiba 9000 GR P4-1700/256/10GB', 'PER'],
        'I115YVQ02' => ['Cannon 2000 EN P4-2000/256/10GB', 'NSW'],
        'J102MLC05' => ['Fujitsu 5000 IT P3-1200/1GB/60GB', 'VIC'],
        'J109NYP03' => ['HP 3000 IT P3-880/128/10GB', 'MEL'],
        'J112XUI05' => ['Dell 5000 EN P3-880/512/30GB', 'PER'],
        'J112YXH07' => ['IBM 7000 EN P3-1400/256/40GB', 'VIC'],
        'J115JBW09' => ['Compaq 9000 IT P3-1200/128/40GB', 'SYD'],
        'J117YTJ03' => ['IBM 3000 EN P4-1900/128/20GB', 'VIC'],
        'K106NSX06' => ['Fujitsu 6000 IT P3-900/256/20GB', 'NT'],
        'K111HOR02' => ['Cannon 2000 EN P4-1700/128/20GB', 'NT'],
        'K112WIS07' => ['Dell 7000 IT P3-1200/256/20GB', 'PER'],
        'K113JAD05' => ['Fujitsu 5000 IT P3-1200/512/10GB', 'PER'],
        'L103BJG04' => ['Toshiba 4000 IT P4-1800/1GB/60GB', 'WA'],
        'L105HMB07' => ['Philips 7000 FR P4-1600/1GB/10GB', 'MEL'],
        'L116RWV08' => ['Philips 8000 SP P3-900/128/10GB', 'NSW'],
        'L118PFA09' => ['Philips 9000 IT P4-1800/128/30GB', 'SYD']
    );
    return \%_TABLE_SAMPLE1;
}

#++++++ Table SAMPLE2 --> Type :ETL::Pequel::Type::Table::External ++++++
sub LoadTableSAMPLE2
{
    my %_TABLE_SAMPLE2;
    my $dsf = 'examples/sample.data';
    open(SAMPLE2, "sort  -u -t'|' -k 1 $dsf |") || die("Unable to open table source file $dsf");
    while (<SAMPLE2>)
    {
        chomp;
        my (@flds) = split("[|]", $_, -1);
        $_TABLE_SAMPLE2{$flds[0]} = [ @flds[ 2,7 ]];
    }
    
    close(SAMPLE2);
    return \%_TABLE_SAMPLE2;
}


sub PrintHeader
{
    local $\="\n";
    local $,="|";
    print STDOUT
        'PRODUCT_CODE',
        'RECORD_COUNT',
        'SALES_QTY_SAMPLE1',
        'SALES_QTY_SAMPLE2',
        'S1_DESCRIPTION',
        'S1_LOCATION',
        'S2_DESCRIPTION',
        'S2_LOCATION'
        ;
}

