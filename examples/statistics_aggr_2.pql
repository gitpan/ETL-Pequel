// vim: syntax=pequel ts=4 sw=4
//:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
//  Script       : statistics_aggr_2.pql
//:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

options
    header                  // (default) write header record to output.
    optimize                // (default) optimize generated code.
    doc_title("Statistics Aggregates Example Script")
    doc_email("sample@youraddress.com")
    doc_version(2.2)

description section
	Demonstrate various statistical aggregates.

input section
    PRODUCT_CODE,
    COST_PRICE,
    DESCRIPTION,
    SALES_CODE,
	SALES_PRICE,
	SALES_QTY,
	SALES_DATE,
	LOCATION

sort by
	SALES_CODE

group by
	SALES_CODE

filter
	# Discard header record
	SALES_QTY ne 'SALES_QTY'

output section
	string SALES_CODE 			SALES_CODE
	numeric NUM_PRODUCTS		distinct PRODUCT_CODE 
	numeric AVG_COST_PRICE		avg COST_PRICE
	string VALUES_QTY			values_all SALES_QTY
	numeric DISTINCT_QTY		distinct SALES_QTY
	numeric MEDIAN_QTY			median SALES_QTY
	numeric VARIANCE_QTY		variance SALES_QTY
	numeric STDDEV_QTY			stddev SALES_QTY
	numeric MAX_QTY				max SALES_QTY
	numeric MIN_QTY				min SALES_QTY
	numeric TEST_4				= MEDIAN_QTY
	numeric RANGE_QTY			range SALES_QTY
	numeric MODE_QTY			mode SALES_QTY
	numeric RANGE_QTY_2			= RANGE_QTY * 2
	numeric RANGE_QTY_3			= RANGE_QTY_2 * 3
	numeric	LOCATION			LOCATION
