#!/usr/bin/perl
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
# vim: syntax=perl ts=4 sw=4
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#Generated By: pequel Version 2.3-6, Build: Wednesday October  26 23:16:49 BST 2005
#            : http://sourceforge.net/projects/pequel/
#Script Name : examples/copy_output_NT.pql
#Created On  : Wed Oct 26 14:03:25 2005
#Perl Version: /usr/bin/perl 5.6.1 on solaris
#For         : 
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#Options:
#prefix(examples) directory pathname prefix.
#dumpcode(1) Dump the generated Perl code for pequel script
#noverbose(1) do not progress counter
#script_name(examples/copy_output_NT.pql) script filename
#optimize(1) optimize generated code.
#doc_title(Copy Output Record Example Script) document title.
#doc_email(sample@youraddress.com) document email entry.
#doc_version(2.3) document version for pequel script.
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
use strict;
use Fcntl ':flock';
use constant _I_LOCATION         => int    0;
use constant _I_PRODUCT_CODE     => int    1;
use constant _I_SALES_TOTAL      => int    2;
use constant _I_LOCATION_NAME    => int    3;
use constant _O_LOCATION_NAME    => int    1;
use constant _O_PRODUCT_CODE     => int    2;
use constant _O_SALES_TOTAL      => int    3;
local $\="\n";
local $,="|";
use constant LAST_ICELL => int 3;
my @I_VAL;
my @O_VAL;
my $key__I_PRODUCT_CODE;
my $previous_key__I_PRODUCT_CODE = undef;
foreach my $f (1..3) { $O_VAL[$f] = undef; }
# Sort:PRODUCT_CODE(asc:string) 
open(DATA, q{cat  - | sort  -t'|' -y -k 2,2 2>/dev/null |}) || die "Cannot open input: $!";
if (open(COPY_OUTPUT_COPY_OUTPUT_COMBINER, '|-') == 0) # Fork -- write to child
{
    &p_copy_output_copy_output_combiner::copy_output_copy_output_combiner;
    exit(0);
}

while (<DATA>)
{
    chomp;
    @I_VAL = split("[|]", $_);
    $key__I_PRODUCT_CODE = $I_VAL[_I_PRODUCT_CODE];
    if (!defined($previous_key__I_PRODUCT_CODE))
    {
        $previous_key__I_PRODUCT_CODE = $key__I_PRODUCT_CODE;
    }
    
    elsif ($previous_key__I_PRODUCT_CODE ne $key__I_PRODUCT_CODE)
    {
        flock(STDOUT, LOCK_EX);
        print STDOUT
            $O_VAL[_O_LOCATION_NAME],
            $O_VAL[_O_PRODUCT_CODE],
            $O_VAL[_O_SALES_TOTAL]
        ;
        flock(STDOUT, LOCK_UN);
        if ($O_VAL[_O_SALES_TOTAL] > 0)
        {
            flock(COPY_OUTPUT_COPY_OUTPUT_COMBINER, LOCK_EX);
            print COPY_OUTPUT_COPY_OUTPUT_COMBINER
                $O_VAL[_O_LOCATION_NAME],
                $O_VAL[_O_PRODUCT_CODE],
                $O_VAL[_O_SALES_TOTAL]
            ;
            flock(COPY_OUTPUT_COPY_OUTPUT_COMBINER, LOCK_UN);
        }
        
        $previous_key__I_PRODUCT_CODE = $key__I_PRODUCT_CODE;
        @O_VAL = undef;
    }
    
    $I_VAL[_I_LOCATION_NAME] = 'Northern Territory';
    $O_VAL[_O_LOCATION_NAME] = $I_VAL[_I_LOCATION_NAME];
    $O_VAL[_O_PRODUCT_CODE] = $I_VAL[_I_PRODUCT_CODE];
    $O_VAL[_O_SALES_TOTAL] += $I_VAL[_I_SALES_TOTAL] unless ($I_VAL[_I_SALES_TOTAL] eq '');
}

flock(STDOUT, LOCK_EX);
print STDOUT
    $O_VAL[_O_LOCATION_NAME],
    $O_VAL[_O_PRODUCT_CODE],
    $O_VAL[_O_SALES_TOTAL]
;
flock(STDOUT, LOCK_UN);
if ($O_VAL[_O_SALES_TOTAL] > 0)
{
    flock(COPY_OUTPUT_COPY_OUTPUT_COMBINER, LOCK_EX);
    print COPY_OUTPUT_COPY_OUTPUT_COMBINER
        $O_VAL[_O_LOCATION_NAME],
        $O_VAL[_O_PRODUCT_CODE],
        $O_VAL[_O_SALES_TOTAL]
    ;
    flock(COPY_OUTPUT_COPY_OUTPUT_COMBINER, LOCK_UN);
}

close(COPY_OUTPUT_COPY_OUTPUT_COMBINER);
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
{
    package p_copy_output_copy_output_combiner;
    sub copy_output_copy_output_combiner
    {
#    !/usr/bin/perl
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#     vim: syntax=perl ts=4 sw=4
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#    Generated By: pequel Version 2.3-6, Build: Wednesday October  26 23:16:49 BST 2005
#                : http://sourceforge.net/projects/pequel/
#    Script Name : examples/copy_output_combiner.pql
#    Created On  : Wed Oct 26 14:03:25 2005
#    Perl Version: /usr/bin/perl 5.6.1 on solaris
#    For         : 
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#    Options:
#        optimize(1) optimize generated code.
#        doc_title(Copy Output Record Example Script) document title.
#        doc_email(sample@youraddress.com) document email entry.
#        doc_version(2.3) document version for pequel script.
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        use strict;
        use Fcntl ':flock';
        use constant _I_LOCATION_NAME    => int    0;
        use constant _I_PRODUCT_CODE     => int    1;
        use constant _I_SALES_TOTAL      => int    2;
        use constant _I_DESCRIPTION      => int    3;
        use constant _O_LOCATION_NAME    => int    1;
        use constant _O_DESCRIPTION      => int    2;
        use constant _O_SALES_TOTAL      => int    3;
        local $\="\n";
        local $,="|";
        use constant VERBOSE => int 10000;
        use constant LAST_ICELL => int 3;
        my @I_VAL;
        my @O_VAL;
        my $key__I_LOCATION_NAME;
        my $previous_key__I_LOCATION_NAME = undef;
        foreach my $f (1..3) { $O_VAL[$f] = undef; }
#     Sort:LOCATION_NAME(asc:string) 
        open(DATA, q{cat  - | sort  -t'|' -y -k 1,1 2>/dev/null |}) || die "Cannot open input: $!";
        while (<DATA>)
        {
            chomp;
            @I_VAL = split("[|]", $_);
            $key__I_LOCATION_NAME = $I_VAL[_I_LOCATION_NAME];
            if (!defined($previous_key__I_LOCATION_NAME))
            {
                $previous_key__I_LOCATION_NAME = $key__I_LOCATION_NAME;
            }
            
            elsif ($previous_key__I_LOCATION_NAME ne $key__I_LOCATION_NAME)
            {
                flock(STDOUT, LOCK_EX);
                print STDOUT
                    $O_VAL[_O_LOCATION_NAME],
                    $O_VAL[_O_DESCRIPTION],
                    $O_VAL[_O_SALES_TOTAL]
                ;
                flock(STDOUT, LOCK_UN);
                $previous_key__I_LOCATION_NAME = $key__I_LOCATION_NAME;
                @O_VAL = undef;
            }
            
            $O_VAL[_O_LOCATION_NAME] = $I_VAL[_I_LOCATION_NAME];
            $I_VAL[_I_DESCRIPTION] = 'State Total';
            $O_VAL[_O_DESCRIPTION] = $I_VAL[_I_DESCRIPTION];
            $O_VAL[_O_SALES_TOTAL] += $I_VAL[_I_SALES_TOTAL] unless ($I_VAL[_I_SALES_TOTAL] eq '');
        }
        
        flock(STDOUT, LOCK_EX);
        print STDOUT
            $O_VAL[_O_LOCATION_NAME],
            $O_VAL[_O_DESCRIPTION],
            $O_VAL[_O_SALES_TOTAL]
        ;
        flock(STDOUT, LOCK_UN);
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    }
    
}

