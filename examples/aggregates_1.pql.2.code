#!/usr/bin/perl
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
# vim: syntax=perl ts=4 sw=4
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#Generated By: pequel Version 2.3-6, Build: Wednesday October  26 23:16:49 BST 2005
#            : http://sourceforge.net/projects/pequel/
#Script Name : examples/aggregates_1.pql
#Created On  : Wed Oct 26 13:23:51 2005
#Perl Version: /usr/bin/perl 5.6.1 on solaris
#For         : 
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#Options:
#prefix(examples) directory pathname prefix.
#dumpcode(1) Dump the generated Perl code for pequel script
#noverbose(1) do not progress counter
#script_name(examples/aggregates_1.pql) script filename
#header(1) write header record to output.
#optimize(1) optimize generated code.
#hash(1) Generate in memory. Input data can be unsorted.
#nulls(1) print zero for null numeric/decimal.
#doc_title(Aggregates Example Script) document title.
#doc_email(sample@youraddress.com) document email entry.
#doc_version(2.2) document version for pequel script.
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
use strict;
use constant _I_PRODUCT_CODE       => int    0;
use constant _I_COST_PRICE         => int    1;
use constant _I_DESCRIPTION        => int    2;
use constant _I_SALES_CODE         => int    3;
use constant _I_SALES_PRICE        => int    4;
use constant _I_SALES_QTY          => int    5;
use constant _I_SALES_DATE         => int    6;
use constant _I_LOCATION           => int    7;
use constant _I_SALES_TOTAL        => int    8;
use constant _O_LOCATION           => int    1;
use constant _O_PRODUCT_CODE       => int    2;
use constant _O_MIN_COST_PRICE     => int    3;
use constant _O_MAX_COST_PRICE     => int    4;
use constant _O_AVG_SALES_PRICE    => int    5;
use constant _O__AVG_SALES_QTY     => int    6;
use constant _O_SALES_TOTAL        => int    7;
use constant _O_SALES_TOTAL_2      => int    8;
use constant _O_RANGE_COST         => int    9;
use constant _O_MODE_SALES_CODE    => int   10;
use constant _O_AVGS               => int   11;
local $\="\n";
local $,="|";
use constant LAST_ICELL => int 8;
my @I_VAL;
my %O_VAL;
my $key;
my %AVERAGE;
my %RANGE;
my %MODE;
&PrintHeader();
while (<STDIN>)
{
    chomp;
    @I_VAL = split("[|]", $_);
    $key = ( $I_VAL[_I_PRODUCT_CODE] ) . '|' . ( $I_VAL[_I_LOCATION] );
    $O_VAL{$key}{_O_LOCATION} = $I_VAL[_I_LOCATION];
    $O_VAL{$key}{_O_PRODUCT_CODE} = $I_VAL[_I_PRODUCT_CODE];
    $O_VAL{$key}{_O_MIN_COST_PRICE} = $I_VAL[_I_COST_PRICE]
        if (!defined($O_VAL{$key}{_O_MIN_COST_PRICE}) || $I_VAL[_I_COST_PRICE] < $O_VAL{$key}{_O_MIN_COST_PRICE});
    $O_VAL{$key}{_O_MAX_COST_PRICE} = $I_VAL[_I_COST_PRICE]
        if (!defined($O_VAL{$key}{_O_MAX_COST_PRICE}) || $I_VAL[_I_COST_PRICE] > $O_VAL{$key}{_O_MAX_COST_PRICE});
    $AVERAGE{$key}{_O_AVG_SALES_PRICE}{_SUM} += $I_VAL[_I_SALES_PRICE];
    $AVERAGE{$key}{_O_AVG_SALES_PRICE}{_COUNT}++;
    $AVERAGE{$key}{_O__AVG_SALES_QTY}{_SUM} += $I_VAL[_I_SALES_QTY];
    $AVERAGE{$key}{_O__AVG_SALES_QTY}{_COUNT}++;
    $I_VAL[_I_SALES_TOTAL] = $I_VAL[_I_SALES_QTY] * $I_VAL[_I_SALES_PRICE];
    $O_VAL{$key}{_O_SALES_TOTAL} += $I_VAL[_I_SALES_TOTAL] unless ($I_VAL[_I_SALES_TOTAL] eq '');
    $I_VAL[_I_SALES_TOTAL] = $I_VAL[_I_SALES_QTY] * $I_VAL[_I_SALES_PRICE];
    $O_VAL{$key}{_O_SALES_TOTAL_2} += $I_VAL[_I_SALES_TOTAL] unless ($I_VAL[_I_SALES_TOTAL] eq '');
    $RANGE{$key}{_O_RANGE_COST}{_MIN} = $I_VAL[_I_COST_PRICE]
        if
        (
            !defined($RANGE{$key}{_O_RANGE_COST}{_MIN})
            || $I_VAL[_I_COST_PRICE] < $RANGE{$key}{_O_RANGE_COST}{_MIN}
        );
        
    $RANGE{$key}{_O_RANGE_COST}{_MAX} = $I_VAL[_I_COST_PRICE]
        if
        (
            !defined($RANGE{$key}{_O_RANGE_COST}{_MAX})
            || $I_VAL[_I_COST_PRICE] > $RANGE{$key}{_O_RANGE_COST}{_MAX}
        );
        
    $MODE{$key}{_O_MODE_SALES_CODE}{qq{$I_VAL[_I_SALES_CODE]}}++;
}

foreach $key (sort  keys %O_VAL)
{
    $O_VAL{$key}{_O_AVG_SALES_PRICE} = ($AVERAGE{$key}{_O_AVG_SALES_PRICE}{_COUNT} == 0 ? 0 : $AVERAGE{$key}{_O_AVG_SALES_PRICE}{_SUM} / $AVERAGE{$key}{_O_AVG_SALES_PRICE}{_COUNT});
    $O_VAL{$key}{_O__AVG_SALES_QTY} = ($AVERAGE{$key}{_O__AVG_SALES_QTY}{_COUNT} == 0 ? 0 : $AVERAGE{$key}{_O__AVG_SALES_QTY}{_SUM} / $AVERAGE{$key}{_O__AVG_SALES_QTY}{_COUNT});
    $O_VAL{$key}{_O_RANGE_COST} = $RANGE{$key}{_O_RANGE_COST}{_MAX} - $RANGE{$key}{_O_RANGE_COST}{_MIN};
    $O_VAL{$key}{_O_MODE_SALES_CODE} = join(' ', &{sub{my @top; foreach my $k (sort { $MODE{$key}{_O_MODE_SALES_CODE}{$b} <=> $MODE{$key}{_O_MODE_SALES_CODE}{$a} } keys %{$MODE{$key}{_O_MODE_SALES_CODE}} ){ last if ($MODE{$key}{_O_MODE_SALES_CODE}{$k} != $MODE{$key}{_O_MODE_SALES_CODE}{$_[0]}); push(@top, $k);} @top; }}((sort { $MODE{$key}{_O_MODE_SALES_CODE}{$b} <=> $MODE{$key}{_O_MODE_SALES_CODE}{$a} } keys %{$MODE{$key}{_O_MODE_SALES_CODE}} )[0]));
    $O_VAL{$key}{_O_AVGS} = $O_VAL{$key}{_O__AVG_SALES_QTY} * 2;
    print STDOUT
        $O_VAL{$key}{_O_LOCATION},
        $O_VAL{$key}{_O_PRODUCT_CODE},
        $O_VAL{$key}{_O_MIN_COST_PRICE},
        $O_VAL{$key}{_O_MAX_COST_PRICE},
        $O_VAL{$key}{_O_AVG_SALES_PRICE},
        $O_VAL{$key}{_O_SALES_TOTAL},
        $O_VAL{$key}{_O_SALES_TOTAL_2},
        $O_VAL{$key}{_O_RANGE_COST},
        $O_VAL{$key}{_O_MODE_SALES_CODE},
        $O_VAL{$key}{_O_AVGS}
    ;
}

#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
sub PrintHeader
{
    local $\="\n";
    local $,="|";
    print 
        'LOCATION',
        'PRODUCT_CODE',
        'MIN_COST_PRICE',
        'MAX_COST_PRICE',
        'AVG_SALES_PRICE',
        'SALES_TOTAL',
        'SALES_TOTAL_2',
        'RANGE_COST',
        'MODE_SALES_CODE',
        'AVGS'
        ;
}

