// vim: syntax=pequel ts=4 sw=4
//:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
//  Script      : copy_output.pql
//:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

options
	input_file(chain_pequel_pt1.pql) // The sub-pequel (pt1) script's output is piped to this (pt2) script's input
    optimize                // (default) optimize generated code.
    doc_title("Copy Output Record Example Script")
    doc_email("sample@youraddress.com")
    doc_version(2.3)

description section

init table // Local table:
//  Table-Name  	Key			Value
	LOC_DESCRIPT	NSW 		'New South Wales'	
	LOC_DESCRIPT	WA 			'Western Australia'
	LOC_DESCRIPT	SA 			'South Australia'
	LOC_DESCRIPT	NT 			'Northern Territory'
	LOC_DESCRIPT	QLD 		'Queensland'
	LOC_DESCRIPT	VIC 		'Victoria'

input section
    LOCATION
	PRODUCT_CODE
    SALES_TOTAL
    LOCATION_DESC => %LOC_DESCRIPT(LOCATION)
	DESCRIPTION => 'State Total'

filter
	LOCATION eq 'WA' \
	|| LOCATION eq 'SA' \
	|| LOCATION eq 'NSW' \
	|| LOCATION eq 'VIC' \
	|| LOCATION eq 'NT'

divert input record (pequel:copy_output_WA.pql)
	LOCATION eq 'WA'

divert input record (pequel:copy_output_SA.pql)
	LOCATION eq 'SA'

divert input record (pequel:copy_output_NSW.pql)
	LOCATION eq 'NSW'

divert input record (pequel:copy_output_VIC.pql)
	LOCATION eq 'VIC'

divert input record (pequel:copy_output_NT.pql)
	LOCATION eq 'NT'

sort by
    LOCATION

group by
    LOCATION

output section
    string LOCATION 		LOCATION_DESC
    string DESCRIPTION		DESCRIPTION
    decimal SALES_TOTAL	 	sum SALES_TOTAL

having
	SALES_TOTAL > 0
	
sort output
    LOCATION
	SALES_TOTAL numeric desc
